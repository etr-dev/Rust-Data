#pragma once
#include <cstdint>

// Offsets updated by: https://github.com/etr-dev/Rust-Data
// Saturday, 10/19/2024 - 3:05:59PM EST
// BuildId: 15958008

namespace RustOffsets {
	inline constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x3c8df20; // BaseEntity_TypeInfo
	inline constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x3c59120; // Facepunch_Input_TypeInfo
	inline constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x3c701c8; // MainCamera_TypeInfo
	inline constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode__TypeInfo = 0x3caa9b8; // System_Collections_Generic_List_BaseGameMode__TypeInfo
	inline constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x3c8e188; // BaseGameMode_TypeInfo
	namespace BasePlayer {
		inline constexpr ::std::ptrdiff_t _f58252d68b0c36a8bbec7510d27a20efc311304d = 0x290; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _8b0247a75a2b33e9e5e590626a32ffc132d2ef0f = 0x308; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _70ec114e7b39e844d194bd90e48fff7a256a075c = 0x380; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _072d57560599d5e24a785d0bcf079d51242bd243 = 0x3F8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _97cb9bc31e67f4ca1409e9186a4fc897a2add0fc = 0x470; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _7204267f90dbb98fea8b1533305e7605151601e7 = 0x4E8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _73453b2af392b334e71a9594997477325532aa1f = 0x560; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _cc6ee030e8f4a10bcc999a4b6e9e1702289a5e2c = 0x5D8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _268bde70604aa72a7d58d59248ef5115673c877b = 0x650; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _c38711f0fbdc02218ad17f5e9748ce0b29489646 = 0x6C8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _0129555b6f2a5cfbf8e0a37babfc68eb1bed99bd = 0x740; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _8f0f9b8e5afcc5b722b2a201459d37594138b80f = 0x7B8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _dd219f3b2ce165641b418d1cca05834b8e292733 = 0x830; // long
		inline constexpr ::std::ptrdiff_t playerModel = 0x838; // PlayerModel
		inline constexpr ::std::ptrdiff_t _b3f7b1a7a3774220c125b7af2d5ec310303dc908 = 0x840; // bool
		inline constexpr ::std::ptrdiff_t _bdc45c498f861f8bd9cf3a589aa85710ffcff3c2 = 0x841; // bool
		inline constexpr ::std::ptrdiff_t _34dcaded2ba5f639648c742b944404832e7f9bee = 0x848; // PlayerVoiceRecorder
		inline constexpr ::std::ptrdiff_t _cc235d51d8e07cdefb749e7a2cfa2e00b5f883f9 = 0x850; // PlayerVoiceSpeaker
		inline constexpr ::std::ptrdiff_t _87bec739e29cf56c04cda27c40f67d2a9b4915f5 = 0x858; // PlayerInput
		inline constexpr ::std::ptrdiff_t _d51e461865907c442346d971f6cdc22b8dd2a7ab = 0x860; // BaseMovement
		inline constexpr ::std::ptrdiff_t _1cb339fc4de94d2dfa5dc10ebc1774ca55469134 = 0x868; // BaseCollision
		inline constexpr ::std::ptrdiff_t bagCount = 0x870; // int
		inline constexpr ::std::ptrdiff_t _b0ff6f5edbae1970e5aec017e6bcdee9341d0b0e = 0x874; // int
		inline constexpr ::std::ptrdiff_t _b1cb5d27ae6878d8f7d1fd83a821ec3b59c633d0 = 0x878; // uint
		inline constexpr ::std::ptrdiff_t _lookingAt = 0x880; // GameObject
		inline constexpr ::std::ptrdiff_t _49b0a06e769ff85765abdd6e0de5d30769588183 = 0x888; // BaseEntity
		inline constexpr ::std::ptrdiff_t _7276145fc15f4c3430095b1172c4451a9affc620 = 0x890; // Collider
		inline constexpr ::std::ptrdiff_t _f2ae8ee21f47f151f5f468b267138567471abb91 = 0x898; // Vector3
		inline constexpr ::std::ptrdiff_t _25345cc68fc03d03b33797a8e2351fcee8780e95 = 0x8A4; // float
		inline constexpr ::std::ptrdiff_t _12ec9a2ccda7b17bdc6f3c89b8e4d2ffd4dcb68c = 0x8A8; // bool
		inline constexpr ::std::ptrdiff_t _1ce3475bede5d96733e315f0fa2da1d3bbcdb603 = 0x8A9; // bool
		inline constexpr ::std::ptrdiff_t _23356add5f32deedf1e79335f6b9e300fa5c6fa4 = 0x8AA; // bool
		inline constexpr ::std::ptrdiff_t _8105ae5ee8785ccf635e2bea432780ccfa9f0d6a = 0x8AB; // bool
		inline constexpr ::std::ptrdiff_t _b54609a8ffd9613e34fb95f0d9bc876a4988ec3c = 0x8AC; // bool
		inline constexpr ::std::ptrdiff_t _471d65c9bc47f8bb786e07c499b641baeb9e8513 = 0x8AD; // bool
		inline constexpr ::std::ptrdiff_t _561c7c826a210c32bf518836bd85421a63f39b86 = 0x8B0; // uint
		inline constexpr ::std::ptrdiff_t _252a435ebe93b7ed1a0bad84baa9803174a28b05 = 0x8B4; // TimeSince
		inline constexpr ::std::ptrdiff_t _87f4d7a53da2e07801ea564ed5e3c0281493bf96 = 0x8B8; // BasePlayer.CameraMode
		inline constexpr ::std::ptrdiff_t _95b5dea4a4e948b56772d982bb1cba738ab5f856 = 0x8BC; // BasePlayer.CameraMode
		inline constexpr ::std::ptrdiff_t _f995a16b2de31e710a7b8cafff786c3a90fb2c5a = 0x8C0; // Vector3
		inline constexpr ::std::ptrdiff_t _8f28595edf5b4f8b4b4ca61183c91d601dd87e7d = 0x8CC; // Vector3
		inline constexpr ::std::ptrdiff_t _61b8e038c4b85f47c0ba2a797fe8d8a45b543853 = 0x8D8; // bool
		inline constexpr ::std::ptrdiff_t GestureViewModel = 0x8E0; // ViewModel
		inline constexpr ::std::ptrdiff_t _4f7a7e0a74dd889c3275819649c5a3139730de48 = 0x8E8; // RespawnInformation
		inline constexpr ::std::ptrdiff_t _dab7f481cd09aefb3abf0626df69a59141e29a78 = 0x8F0; // float
		inline constexpr ::std::ptrdiff_t _cf2368dd49d9f6c1e3ffe381615e4d745479a640 = 0x8F4; // TimeSince
		inline constexpr ::std::ptrdiff_t _1e3ee26a64bd4a0c78918244a52ac023d2f3c705 = 0x8F8; // RealTimeSince
		inline constexpr ::std::ptrdiff_t _bc98221123184fa4e9bd913b17cf9dd9f589ef38 = 0x8FC; // float
		inline constexpr ::std::ptrdiff_t _2211a2ecfb66ca60d9fdd1b2f7d1a32ad10fdd50 = 0x900; // float
		inline constexpr ::std::ptrdiff_t _e281c11537ec8510e7046200e35f60ee41262351 = 0x904; // float
		inline constexpr ::std::ptrdiff_t _0543be5bd79d5b70345a09fce2c61015cd229ed5 = 0x908; // %0cc4e8f92534588060d226fb379b0b347a54d66f
		inline constexpr ::std::ptrdiff_t _11a3dc6041dfc0d3d529c7212781d249460ac51c = 0x910; // Vector3
		inline constexpr ::std::ptrdiff_t _c5e1649db69f340556e0ba68654229e5c7641e38 = 0x91C; // bool
		inline constexpr ::std::ptrdiff_t _66cb4e21fbcc105127107940d9c1d0568f58ea1e = 0x928; // Queue<string>
		inline constexpr ::std::ptrdiff_t gestureList = 0x930; // GestureCollection
		inline constexpr ::std::ptrdiff_t _2862ef06802f52e0feaa42a8fe5e1d8ab21043f0 = 0x938; // TimeUntil
		inline constexpr ::std::ptrdiff_t _f2924519b5f5fe584853a7d3fc7b1c23ac8554aa = 0x93C; // TimeSince
		inline constexpr ::std::ptrdiff_t _849f78df3137abf0c2aaeb922165243576441f62 = 0x940; // GestureConfig
		inline constexpr ::std::ptrdiff_t _c2a3f68587a0780c883cbdeacbe92cc2675e659c = 0x948; // HeldEntity
		inline constexpr ::std::ptrdiff_t _0e21d10cb6a708feaaf5ea4d170c1ec809507ee0 = 0x950; // float
		inline constexpr ::std::ptrdiff_t _0b5b0e1c6d477215bb1050d178105c6b738a8708 = 0x954; // float
		inline constexpr ::std::ptrdiff_t currentTeam = 0x958; // ulong
		inline constexpr ::std::ptrdiff_t clientTeam = 0x960; // PlayerTeam
		inline constexpr ::std::ptrdiff_t _d8d9680875551c765a55ec422a2d7ed55b533453 = 0x968; // ListHashSet<ulong>
		inline constexpr ::std::ptrdiff_t _be7e15bb6c254b249e11d95ccfbcadcc5d4806b5 = 0x970; // float
		inline constexpr ::std::ptrdiff_t _7652ed51841df74ff49bd8d06518759b47d2cff8 = 0x978; // ulong
		inline constexpr ::std::ptrdiff_t _29e42531d4b6f9d643c13ce99ce7868f209a19aa = 0x980; // int
		inline constexpr ::std::ptrdiff_t _669038afe92bd4cf8e17d2f8ce92957dafc74cce = 0x988; // string
		inline constexpr ::std::ptrdiff_t _b71e450b26598414131cf91818b580b91bbdfb53 = 0x990; // string
		inline constexpr ::std::ptrdiff_t clActiveItem = 0x998; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<ItemId>
		inline constexpr ::std::ptrdiff_t _0feb9b084150f4dfaa5c86125bfb6bd3090fbb29 = 0x9A0; // List<MapNote>
		inline constexpr ::std::ptrdiff_t _b2bf3a80a3588963101aad3be92fdc81c0e7a335 = 0x9A8; // MapNote
		inline constexpr ::std::ptrdiff_t _860371e0f3ddc83bd6aa77591e8f0891ccc2cab5 = 0x9B0; // bool
		inline constexpr ::std::ptrdiff_t missions = 0x9B8; // List<BaseMission.%715ea160206478141de36208dc3668b6fdcd50a0>
		inline constexpr ::std::ptrdiff_t _cbb43c68865e91513963369393fe6dac89198984 = 0x9C0; // int
		inline constexpr ::std::ptrdiff_t _e7d8d291328781ed333d05d1933f5116c9bfabb1 = 0x9C8; // ModelState
		inline constexpr ::std::ptrdiff_t _0f3de241ed7047093270a8e33192e0b2ffebb404 = 0x9D0; // %83c2390e34d517ee638c8fe387ab0e02280cd630
		inline constexpr ::std::ptrdiff_t _768634f079efcc7968979018f57c842d7676153e = 0x9E0; // float
		inline constexpr ::std::ptrdiff_t _d81fe767e7da7124f5439eca82d680c7c8e1ac86 = 0x9E4; // bool
		inline constexpr ::std::ptrdiff_t PetEntity = 0x9E8; // BaseEntity
		inline constexpr ::std::ptrdiff_t _b48d575472ca72e37fa24acec5231ad636a3db9d = 0x9F0; // float
		inline constexpr ::std::ptrdiff_t _eb9ed09ebfe1a3120573a9924250428435ec850c = 0x9F4; // uint
		inline constexpr ::std::ptrdiff_t _e93dc9022bb643cea3abdebc03f6b5b7b714130a = 0x9F8; // NetworkableId
		inline constexpr ::std::ptrdiff_t _51d85a566663274301130395d77e91f70595a864 = 0xA00; // List<MapNote>
		inline constexpr ::std::ptrdiff_t _c9c909fa4622c5e829a3c4dfe742d14f5b69685e = 0xA08; // bool
		inline constexpr ::std::ptrdiff_t _8b3fb778c08c383e89cde1d2a52ac420a30f7296 = 0xA0C; // TimeSince
		inline constexpr ::std::ptrdiff_t _d7db1f80d948bfff2de17a4f639a9ad7b5827169 = 0xA10; // float
		inline constexpr ::std::ptrdiff_t _d0195cf543dd6735f11bb862f71c11c29b4dbf69 = 0xA18; // BuildingPrivlidge
		inline constexpr ::std::ptrdiff_t _cf635e2d47874cc9a0b4d4a7d43a7bfdb2bf4ba6 = 0xA20; // float
		inline constexpr ::std::ptrdiff_t _8c2cf622ddd76c1fb1606db1664c671662a3f61c = 0xA24; // bool
		inline constexpr ::std::ptrdiff_t _c9d918bfde8c6e61e3969d88a0d712619ee2aa3c = 0xA28; // float
		inline constexpr ::std::ptrdiff_t _a137572360d6e40231dc99d328e654ccff177578 = 0xA2C; // bool
		inline constexpr ::std::ptrdiff_t _bc1e889f6eab7dca7941bda3ae90eb6d2be144ae = 0xA30; // BaseEntity
		inline constexpr ::std::ptrdiff_t _9a54abeb0317610eb601200e9a3b1f25d9d0629c = 0xA38; // float
		inline constexpr ::std::ptrdiff_t _fd203c6e03c7a6f4c0dc36dfb25a5015cc64ec44 = 0xA3C; // int
		inline constexpr ::std::ptrdiff_t _988fac4cf409ff7a68c1f8bd077f471e80292b97 = 0xA40; // TimeSince
		inline constexpr ::std::ptrdiff_t _5f1b186041de9684569a27ac2174a6765959acbc = 0xA44; // float
		inline constexpr ::std::ptrdiff_t _4f46e75ec3ec79da39853bdcd7bd6b3734945efa = 0xA48; // float
		inline constexpr ::std::ptrdiff_t _8e2783aab4eb911ed5e433198b64d3c22747b74c = 0xA4C; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float>
		inline constexpr ::std::ptrdiff_t _a47e1ef3c214f101ccf09285d94c2f4f80a51e9c = 0xA50; // Stopwatch
		inline constexpr ::std::ptrdiff_t _08de9f6dc81de6f076876d5faea81c9bb535e97e = 0xA58; // PlayerTick
		inline constexpr ::std::ptrdiff_t _f0e932553fe10bd0f8907f143369ca35c01a19c6 = 0xA60; // BasePlayer.TutorialItemAllowance
		inline constexpr ::std::ptrdiff_t _a8bedd5499e5bf871f9523d65362cc71819bbff6 = 0xA64; // float
		inline constexpr ::std::ptrdiff_t _d189e33e236366a361202a91c53550f8347cbea2 = 0xA68; // float
		inline constexpr ::std::ptrdiff_t _5f31b13869fba8e4dc142140159819180199939d = 0xA6C; // float
		inline constexpr ::std::ptrdiff_t _9cd84bfc3cd81584dbd27194b4cb5b510d487f40 = 0xA70; // bool
		inline constexpr ::std::ptrdiff_t fallDamageEffect = 0xA78; // GameObjectRef
		inline constexpr ::std::ptrdiff_t drownEffect = 0xA80; // GameObjectRef
		inline constexpr ::std::ptrdiff_t playerFlags = 0xA88; // BasePlayer.PlayerFlags
		inline constexpr ::std::ptrdiff_t _949ee0940680f925f93696e3b43c728fa1b234c2 = 0xA90; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<PlayerEyes>
		inline constexpr ::std::ptrdiff_t inventory = 0xA98; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<PlayerInventory>
		inline constexpr ::std::ptrdiff_t _c7870423d02dec59ec59249a571b88e6984e1969 = 0xAA0; // PlayerBlueprints
		inline constexpr ::std::ptrdiff_t _481f382cd24e62b9b4493ef900c18dd4d66b7e9c = 0xAA8; // PlayerMetabolism
		inline constexpr ::std::ptrdiff_t _8433a826646f615b25484bcd7fe192e5be664fad = 0xAB0; // PlayerModifiers
		inline constexpr ::std::ptrdiff_t _3100a44b4574818d56f47e0597118b9bf2830608 = 0xAB8; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<CapsuleCollider>
		inline constexpr ::std::ptrdiff_t playerBelt = 0xAC0; // %ba9edea0fbdb1007d59fa951cbc3bfb44cf2adbe
		inline constexpr ::std::ptrdiff_t _d8a3f33cfe5ad97395c3c426069e95acd8b2c3b7 = 0xAC8; // Rigidbody
		inline constexpr ::std::ptrdiff_t userID = 0xAD0; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<ulong>
		inline constexpr ::std::ptrdiff_t userIDString = 0xAD8; // string
		inline constexpr ::std::ptrdiff_t _77ec280a2c1a92a207f83b153404c1778454e233 = 0xAE0; // int
		inline constexpr ::std::ptrdiff_t _f75d3c0fe49273af3fc20b10e2813c9c1eee2d7e = 0xAE4; // int
		inline constexpr ::std::ptrdiff_t _displayName = 0xAE8; // string
		inline constexpr ::std::ptrdiff_t _22bd874458232000abbb1d89d59a459aeee1d5a0 = 0xAF0; // string
		inline constexpr ::std::ptrdiff_t _5b03f7d388350d6f7bab4c5ad484ddbd1f880ccc = 0xAF8; // BasePlayer.CapsuleColliderInfo
		inline constexpr ::std::ptrdiff_t _3a503f72279097cc6ec4115f49d2b592c55da4a9 = 0xB0C; // BasePlayer.CapsuleColliderInfo
		inline constexpr ::std::ptrdiff_t _9b7c2ae46ae369ba33ddd62f1cdb0e0a3ed5b352 = 0xB20; // BasePlayer.CapsuleColliderInfo
		inline constexpr ::std::ptrdiff_t _b9421874fe804f62a5001e65de1192687ad07fe0 = 0xB34; // BasePlayer.CapsuleColliderInfo
		inline constexpr ::std::ptrdiff_t _424d759325472265b3a452ffd38947526f4523f5 = 0xB48; // ProtectionProperties
		inline constexpr ::std::ptrdiff_t _5eaf44766b75cf32759438230abf5ca265e8f937 = 0xB50; // float
		inline constexpr ::std::ptrdiff_t _a156f3d779efb60dd36d8c3f3f25b6da27548808 = 0xB54; // float
		inline constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xB58; // float
		inline constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xB5C; // bool
		inline constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xB60; // float
		inline constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xB64; // float
		inline constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xB68; // float
		inline constexpr ::std::ptrdiff_t equippingBlocked = 0xB6C; // bool
		inline constexpr ::std::ptrdiff_t eggVision = 0xB70; // float
		inline constexpr ::std::ptrdiff_t _1b420616d08fc8c636e3ade316d8b09c0c8ed796 = 0xB78; // PhoneController
		inline constexpr ::std::ptrdiff_t designingAIEntity = 0xB80; // BaseEntity
	} // BasePlayer
	namespace BaseEntity {
		inline constexpr ::std::ptrdiff_t _6a5ce6395f4d1e88ae81cdbb454a09f91638a574 = 0x80; // Ragdoll
		inline constexpr ::std::ptrdiff_t _cacc8f3953b5498cfed6be5bfeb6b2c70ff1a7a4 = 0x88; // %4fe3d712d6c754a8ea1800bed15d1a07adce13a7
		inline constexpr ::std::ptrdiff_t _fd7108c5a3c08e2f8c40b99924ff09c8c0983c09 = 0x90; // float
		inline constexpr ::std::ptrdiff_t _eaecaea2adb384572cd48f3d67fcac7057c57ba8 = 0x98; // List<%85780758c8d4d2918511283d6f6204cc96c14526>
		inline constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
		inline constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
		inline constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
		inline constexpr ::std::ptrdiff_t model = 0xC8; // Model
		inline constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags
		inline constexpr ::std::ptrdiff_t _f9b53351777451717cef410b926027cf095e65de = 0xD4; // uint
		inline constexpr ::std::ptrdiff_t _30b23f22b48fc201021a55a605c1cdd497c9032b = 0xD8; // ulong
		inline constexpr ::std::ptrdiff_t _21354d565aa807dd5583d135aded6bd1ec51944e = 0xE0; // EntityComponentBase[]
		inline constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool
		inline constexpr ::std::ptrdiff_t _3c679268f16e1cb900597cbd84189def922911d7 = 0xF0; // string
		inline constexpr ::std::ptrdiff_t _8a062a6274b8bd454d748e05d1251dd081c19df5 = 0xF8; // ulong
		inline constexpr ::std::ptrdiff_t _8f72e6e058e350c172beec9021d7da203aab4232 = 0x100; // uint
		inline constexpr ::std::ptrdiff_t _f815eb6392e968ae38b80dd495f829002582e442 = 0x108; // List<%6db8f07905a90c6260d974d4db822885fbd04612>
		inline constexpr ::std::ptrdiff_t _8ba7ac9e35789c5993b0cd7042a3e3142a73e5a5 = 0x110; // bool
		inline constexpr ::std::ptrdiff_t _99f21c871bee977c2d06cc7ee38d330605306087 = 0x118; // List<BaseEntity.%d12f47322b328a10cb9b3fd1adaaa70982bbfbc6>
		inline constexpr ::std::ptrdiff_t _a22b6487b4c96e7179061fb8f4ae0b584df0dd27 = 0x120; // Action
		inline constexpr ::std::ptrdiff_t _c9e5d51d5641e32e2190b1a130b68328a1887d58 = 0x128; // BaseEntity
		inline constexpr ::std::ptrdiff_t _236070fd5e5493205898aa764ae354568a0143fd = 0x130; // ItemSkin
		inline constexpr ::std::ptrdiff_t _1350e3760cd5cbabf00e90e648debf1a9543fe2e = 0x138; // Action
		inline constexpr ::std::ptrdiff_t _a12bceae02b5007e3e92f7b2c9c7b7596359016f = 0x140; // Action
		inline constexpr ::std::ptrdiff_t _386f4d77382fec1820659e1e11d2306d3ef3d3c8 = 0x148; // %83c2390e34d517ee638c8fe387ab0e02280cd630[]
		inline constexpr ::std::ptrdiff_t _c5bdd847359ad749a29913c53b65e9186dd8cf9a = 0x150; // List<TriggerBase>
		inline constexpr ::std::ptrdiff_t _e9e44ea6a2b54c61f6454a55bfbb08a3ac5b5716 = 0x158; // bool
		inline constexpr ::std::ptrdiff_t _d28c3373061278d88d15cb56af3e9d373aa02d2e = 0x159; // bool
		inline constexpr ::std::ptrdiff_t _01caed504afc934e5d62278056637dafeddb94e5 = 0x15A; // bool
		inline constexpr ::std::ptrdiff_t _1d50d45c312b6688bf30c92a44c1d9819025f9da = 0x160; // %f540cd8dd3186d5ac8083499fdc1e768b85989a0
		inline constexpr ::std::ptrdiff_t _fa89808dc3690d52da92b36fc285399a5745cfb5 = 0x180; // float
	} // BaseEntity
	namespace BaseCombatEntity {
		inline constexpr ::std::ptrdiff_t _15de435d5a1c4fb0ad5b34f4cb412d980083a76e = 0x188; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
		inline constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties
		inline constexpr ::std::ptrdiff_t startHealth = 0x210; // float
		inline constexpr ::std::ptrdiff_t pickup = 0x218; // BaseCombatEntity.Pickup
		inline constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
		inline constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
		inline constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
		inline constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool
		inline constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool
		inline constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool
		inline constexpr ::std::ptrdiff_t _e8dc13ef57aa859fe7da7ab730b62d15361e4034 = 0x27C; // float
		inline constexpr ::std::ptrdiff_t _5efa0e0536b6b3ca6d3d1ab64e7985557b600aed = 0x280; // float
		inline constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction
		inline constexpr ::std::ptrdiff_t _193f02824d61acd87adc497102ebecc4ec167445 = 0x288; // float
		inline constexpr ::std::ptrdiff_t _4474c17f9814afbd2d542480563f651a77150c17 = 0x28C; // int
	} // BaseCombatEntity
	namespace BaseCorpse {
		inline constexpr ::std::ptrdiff_t prefabRagdoll = 0x290; // GameObjectRef
		inline constexpr ::std::ptrdiff_t parentEnt = 0x298; // BaseEntity
		inline constexpr ::std::ptrdiff_t _e5b1013d3427a845fb1211c4441a87804be240be = 0x2A0; // ResourceDispenser
		inline constexpr ::std::ptrdiff_t _e931963f5b0c605d12e9c42856110eabaa5136d1 = 0x2A8; // Rigidbody
		inline constexpr ::std::ptrdiff_t blockDamageIfNotGather = 0x2B0; // bool
		inline constexpr ::std::ptrdiff_t _cee0317ec82b1584c4e5ef87fc8cc27651aa8956 = 0x2B8; // GameObject
		inline constexpr ::std::ptrdiff_t _8102c70996429270ba13a6b94b18c8cbb531e552 = 0x2C0; // Ragdoll
	} // BaseCorpse
	namespace LootableCorpse {
		inline constexpr ::std::ptrdiff_t _a6506d417db46cfee886a22f3354f32a76a60d49 = 0x2C8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x340; // string
		inline constexpr ::std::ptrdiff_t _0c02addb67d09500a751ebe2d99b8bc99f1d9430 = 0x348; // ulong
		inline constexpr ::std::ptrdiff_t _b36b79c8e0779b8dabc4224c9dbad407c2f805e5 = 0x350; // string
		inline constexpr ::std::ptrdiff_t _c97dd73cd097def9d7042d12815cd15a919fa6df = 0x358; // string
		inline constexpr ::std::ptrdiff_t _c0a6fda073fe7a7bc428ff42e0eb419fede15952 = 0x360; // bool
	} // LootableCorpse
	namespace PlayerCorpse {
		inline constexpr ::std::ptrdiff_t buoyancy = 0x368; // Buoyancy
		inline constexpr ::std::ptrdiff_t underwearSkin = 0x370; // uint
		inline constexpr ::std::ptrdiff_t bonePosData = 0x378; // PlayerBonePosData
		inline constexpr ::std::ptrdiff_t _dea7ab084877f655a432593a098ce562346ebc33 = 0x380; // Ragdoll
		inline constexpr ::std::ptrdiff_t _d01cc11d4f90e2d97dd19c79fef9e2ca73de5a3c = 0x388; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t _244057a0411e37c8d1ccd86d6937c94767c303cf = 0x390; // uint
	} // PlayerCorpse
	namespace BuildingPrivlidge {
		inline constexpr ::std::ptrdiff_t _f0f36851fbffca4e6c4481554785e59e6438f4f8 = 0x4A0; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _761b49940314724df628962a24874902930acee1 = 0x518; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _ee6e5dcf655e479192364c159364a84b73b42a1c = 0x590; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _3f31ff5d1f4665d6e2b34a032c2a8c57f8ded0c5 = 0x608; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _085b6a8f32686f893934cc09a86f4f830ce5f2e5 = 0x680; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _f0944a973f6641f6db2e7510a9610b1e74405099 = 0x6F8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
		inline constexpr ::std::ptrdiff_t _4dfa604c05d7a6edde9d7c3068fad534d0486409 = 0x778; // HashSet<PlayerNameID>
		inline constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition>
		inline constexpr ::std::ptrdiff_t _ae3e86673baf4584a3de7793c2cb002f4f2be892 = 0x788; // float
		inline constexpr ::std::ptrdiff_t _35027f89968f1d7e0a080141f5bcc2efbd354519 = 0x78C; // float
		inline constexpr ::std::ptrdiff_t _e7af12126768ff4e4a3e7a9aea74e44e211404f5 = 0x790; // float
		inline constexpr ::std::ptrdiff_t _d8ea80bb7cfece68a67714e8095049ba7888f080 = 0x794; // bool
		inline constexpr ::std::ptrdiff_t _c989157bff0cfcfac56f5e52c4bd7159a7a56fc0 = 0x795; // bool
		inline constexpr ::std::ptrdiff_t _53adbd318bf6e5b6e8ed4a28761fdfe7de3100cf = 0x798; // DateTime
	} // BuildingPrivlidge
	namespace BaseProjectile {
		inline constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float
		inline constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float
		inline constexpr ::std::ptrdiff_t distanceScale = 0x2A8; // float
		inline constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float
		inline constexpr ::std::ptrdiff_t automatic = 0x2B0; // bool
		inline constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
		inline constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
		inline constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t silencedAttack = 0x2C0; // GameObjectRef
		inline constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D0; // Transform
		inline constexpr ::std::ptrdiff_t reloadTime = 0x2D8; // float
		inline constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2DC; // bool
		inline constexpr ::std::ptrdiff_t primaryMagazine = 0x2E0; // BaseProjectile.Magazine
		inline constexpr ::std::ptrdiff_t fractionalReload = 0x2E8; // bool
		inline constexpr ::std::ptrdiff_t reloadStartDuration = 0x2EC; // float
		inline constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F0; // float
		inline constexpr ::std::ptrdiff_t reloadEndDuration = 0x2F4; // float
		inline constexpr ::std::ptrdiff_t aimSway = 0x2F8; // float
		inline constexpr ::std::ptrdiff_t aimSwaySpeed = 0x2FC; // float
		inline constexpr ::std::ptrdiff_t recoil = 0x300; // RecoilProperties
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x308; // AnimationCurve
		inline constexpr ::std::ptrdiff_t aimCone = 0x310; // float
		inline constexpr ::std::ptrdiff_t hipAimCone = 0x314; // float
		inline constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x318; // float
		inline constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x31C; // float
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x320; // float
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x324; // float
		inline constexpr ::std::ptrdiff_t stancePenaltyScale = 0x328; // float
		inline constexpr ::std::ptrdiff_t hasADS = 0x32C; // bool
		inline constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x32D; // bool
		inline constexpr ::std::ptrdiff_t manualCycle = 0x32E; // bool
		inline constexpr ::std::ptrdiff_t _437db5b16c7687ac330563eae450d3bfd55125b4 = 0x32F; // bool
		inline constexpr ::std::ptrdiff_t _8d575e1987040a77f0c6c0a861bdba6c85b3e0ef = 0x330; // bool
		inline constexpr ::std::ptrdiff_t _7e29fb1a9cd6b60e5849b8fbc8ae9443fd6b9341 = 0x331; // bool
		inline constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x332; // bool
		inline constexpr ::std::ptrdiff_t isBurstWeapon = 0x333; // bool
		inline constexpr ::std::ptrdiff_t canChangeFireModes = 0x334; // bool
		inline constexpr ::std::ptrdiff_t defaultOn = 0x335; // bool
		inline constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x338; // float
		inline constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x33C; // float
		inline constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x340; // float
		inline constexpr ::std::ptrdiff_t resetDuration = 0x344; // float
		inline constexpr ::std::ptrdiff_t numShotsFired = 0x348; // int
		inline constexpr ::std::ptrdiff_t _12917b67503335ba7d561d4f11fdf1078ef6e820 = 0x34C; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float>
		inline constexpr ::std::ptrdiff_t _bb02d8e4f55b0a6b7dcce5e5b473650afcaf3f50 = 0x350; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float>
		inline constexpr ::std::ptrdiff_t _5a2e00aa5b4ddd50583f7d32eb491cb3e9987fa4 = 0x354; // float
		inline constexpr ::std::ptrdiff_t _5ca3bdab517a6a86d65cbdf699327a8895a4c629 = 0x358; // float
		inline constexpr ::std::ptrdiff_t _bd6f5205ff62600e809d68b3f360a6e4c162927a = 0x35C; // uint
		inline constexpr ::std::ptrdiff_t _8b6f155aef87d637904e9b870d76ba82b50165d0 = 0x360; // float
		inline constexpr ::std::ptrdiff_t _a886d7b53ea2780b6fbf86bdca39c24d3967949f = 0x364; // float
		inline constexpr ::std::ptrdiff_t _8ea523931354ce50640bb4ff254ba65846d7cc08 = 0x368; // float
		inline constexpr ::std::ptrdiff_t _7d52c038756b416d686625c1ca9b26d30225de44 = 0x36C; // float
		inline constexpr ::std::ptrdiff_t _d460df5f4e88e8b8a4f051a95f96a50dc5079da6 = 0x370; // bool
		inline constexpr ::std::ptrdiff_t _d8cfc6b66f02bfb304ecd93cea9ba59b4d16ed9e = 0x374; // TimeSince
		inline constexpr ::std::ptrdiff_t _84d1398e274f663c60b0b53974fe3f3d436b591d = 0x378; // float
		inline constexpr ::std::ptrdiff_t _9b631cdd6bcea12aabfe8e5360da31885cb586eb = 0x37C; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float>
		inline constexpr ::std::ptrdiff_t _8ffad64f80153a5563e1ed8739a7f24dddd84c5d = 0x380; // float
		inline constexpr ::std::ptrdiff_t _d3d6cb76240ed08c158ea3582dcb68e55382a5dc = 0x388; // ItemDefinition
		inline constexpr ::std::ptrdiff_t _579f02fc5f8b6b75904a26a9f4e50fc1dae8870f = 0x390; // int
		inline constexpr ::std::ptrdiff_t _d0533569d5bd90eb5e5cfa4680489375a68252a8 = 0x394; // int
		inline constexpr ::std::ptrdiff_t _923a40a70e2f54b153140b0c25c48da9c682f4db = 0x398; // int
		inline constexpr ::std::ptrdiff_t _11feddfe24d70215575ded07d73e04bb2046967d = 0x39C; // bool
		inline constexpr ::std::ptrdiff_t _ccd7353cbed17f3933011fd121b24a83cdad14f1 = 0x3A0; // float
		inline constexpr ::std::ptrdiff_t _581fdd1115fb6bf93793b3b408939b653f132508 = 0x3A4; // bool
	} // BaseProjectile
	namespace Magazine {
		inline constexpr ::std::ptrdiff_t capacity = 0x18; // int
		inline constexpr ::std::ptrdiff_t contents = 0x1C; // int
		inline constexpr ::std::ptrdiff_t ammoType = 0x20; // ItemDefinition
		inline constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // bool
		inline constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
	} // Magazine
	namespace PlayerInventory {
		inline constexpr ::std::ptrdiff_t _e5923b28a37000c1bca1df3e6476824044cb4279 = 0x28; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t _502bbbc294478a0026fd0709184bf12a2a776f49 = 0x30; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t _75a48d39abea63c94032284c013b42c12e4d45f8 = 0x38; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
		inline constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot
		inline constexpr ::std::ptrdiff_t _5147680f0ac29de5843fb95ca9fc1001154a4dbf = 0x50; // List<ItemIcon>
		inline constexpr ::std::ptrdiff_t _37cd29477f4bce6ad11dc51ff17738eed1fcc8cf = 0x58; // PlayerInventory.%00680e0d78d57a1d4a75b71324aa4f1ac4b4ae45
		inline constexpr ::std::ptrdiff_t _b201f973eaa178625a459cf2d598aa9923f366f8 = 0x68; // List<%033c0143fa8e095703c6e344a2a85833e3628b3e>
	} // PlayerInventory
	namespace ItemContainer {
		inline constexpr ::std::ptrdiff_t UID = 0x10; // ItemContainerId
		inline constexpr ::std::ptrdiff_t slots = 0x18; // int
		inline constexpr ::std::ptrdiff_t temperature = 0x1C; // float
		inline constexpr ::std::ptrdiff_t flags = 0x20; // int
		inline constexpr ::std::ptrdiff_t allowedContents = 0x24; // int
		inline constexpr ::std::ptrdiff_t maxStackSize = 0x28; // int
		inline constexpr ::std::ptrdiff_t allowedItems = 0x30; // List<int>
		inline constexpr ::std::ptrdiff_t availableSlots = 0x38; // List<int>
		inline constexpr ::std::ptrdiff_t volume = 0x40; // int
		inline constexpr ::std::ptrdiff_t contents = 0x48; // List<Item>
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x50; // bool
	} // ItemContainer
	namespace PlayerModel {
		inline constexpr ::std::ptrdiff_t collision = 0x20; // BoxCollider
		inline constexpr ::std::ptrdiff_t censorshipCube = 0x28; // GameObject
		inline constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
		inline constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
		inline constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
		inline constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
		inline constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController
		inline constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
		inline constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[]
		inline constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform
		inline constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform
		inline constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // Transform
		inline constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform
		inline constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // Vector3
		inline constexpr ::std::ptrdiff_t isPreview = 0x94; // bool
		inline constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3
		inline constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion
		inline constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3
		inline constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion
		inline constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float
		inline constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3
		inline constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion
		inline constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3
		inline constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion
		inline constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar
		inline constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar
		inline constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t _2b94d07f8f106f4ebb300de137d2498ef3f8bc6a = 0x150; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection
		inline constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection
		inline constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile
		inline constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float
		inline constexpr ::std::ptrdiff_t skinColor = 0x174; // float
		inline constexpr ::std::ptrdiff_t skinNumber = 0x178; // float
		inline constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float
		inline constexpr ::std::ptrdiff_t hairNumber = 0x180; // float
		inline constexpr ::std::ptrdiff_t skinType = 0x184; // int
		inline constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds
		inline constexpr ::std::ptrdiff_t showSash = 0x190; // bool
		inline constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int
		inline constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint
		inline constexpr ::std::ptrdiff_t _f1c7ca7bf883322e9802fde17eea4b66b57fae27 = 0x1A0; // ulong
		inline constexpr ::std::ptrdiff_t _de54298722febfc1b41d6b27594da78ebbec241c = 0x1A8; // Quaternion
		inline constexpr ::std::ptrdiff_t _6aa2be06c7b1ce1d28e3c5c9cd24a6ae04c0091f = 0x1B8; // Quaternion
		inline constexpr ::std::ptrdiff_t _e7d8d291328781ed333d05d1933f5116c9bfabb1 = 0x1C8; // ModelState
		inline constexpr ::std::ptrdiff_t position = 0x1D0; // Vector3
		inline constexpr ::std::ptrdiff_t _8338e5fecb6890245cce111210e43d63903966f8 = 0x1DC; // Vector3
		inline constexpr ::std::ptrdiff_t _62d452933488289aa56789942f634f85100549c0 = 0x1E8; // Vector3
		inline constexpr ::std::ptrdiff_t _a84742e4a9af8394ff5d3da725211b1aec7928ae = 0x1F4; // Vector3
		inline constexpr ::std::ptrdiff_t _a7eb1836f4a5d9a09f3648c8dfd0c0e9017cb13b = 0x200; // Quaternion
		inline constexpr ::std::ptrdiff_t _c606072b87ffa5dda2d69394911ec8f833bef08c = 0x210; // Quaternion
		inline constexpr ::std::ptrdiff_t _5027a2bf2c27b238ca09987c0aebbb10875c981d = 0x220; // float
		inline constexpr ::std::ptrdiff_t _bc5f5991d1fbb449ac4f69a0f8f727122e9a0d84 = 0x224; // Vector3
		inline constexpr ::std::ptrdiff_t _9451dc5c5d52b2b8e941b2dfd3e16df13b0d2dc9 = 0x230; // Vector3
		inline constexpr ::std::ptrdiff_t _7fc98ec8e1a04e26b98c9d5bf7d9cb55f75e6b85 = 0x23C; // bool
		inline constexpr ::std::ptrdiff_t _871ab324a463ccf5b5c680d0869fd0e56f1f850f = 0x23D; // bool
		inline constexpr ::std::ptrdiff_t _57ec7a07aec5d459d3e4835af804487ecb58d4f8 = 0x240; // uint
		inline constexpr ::std::ptrdiff_t _a9bd7757e7d88f0b17a6ef9cc1f6375aa509f387 = 0x244; // bool
		inline constexpr ::std::ptrdiff_t _1cb4fe88822f5fa48bbe63ac1ccc84c476d97162 = 0x248; // PlayerNameTag
		inline constexpr ::std::ptrdiff_t _da8cdad5b0415be53f02e251dbfc2b374396d5e7 = 0x250; // bool
		inline constexpr ::std::ptrdiff_t _0a4cf67d8fa43a4c48898d4a3cd4b964baf6cca1 = 0x251; // bool
		inline constexpr ::std::ptrdiff_t _55ffbb8fd40bf6a94447d8b0b5c2046c5b9d0e15 = 0x258; // SoundDefinition
		inline constexpr ::std::ptrdiff_t _4504a9a8972d724a2ffc1b9780a923075c793842 = 0x260; // SoundDefinition
		inline constexpr ::std::ptrdiff_t _f137e3d0b37a3c2a75f3bd21b39ee27df06c71eb = 0x268; // bool
		inline constexpr ::std::ptrdiff_t _680935fd15e884565c64a866430a0467f562d44c = 0x270; // GestureConfig
		inline constexpr ::std::ptrdiff_t _493bd832b1ebe4b778a678aa24ee56c2b86bc7b2 = 0x278; // bool
		inline constexpr ::std::ptrdiff_t _b45273a596114c47b8a0be77f3f8a731fcbb6829 = 0x280; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t _b793558b0d0f55836be36910d9f7658784fbedcb = 0x288; // SkinnedMultiMesh
		inline constexpr ::std::ptrdiff_t _9d1e28bf4a64505f5e32a44697ca1548bb35cc0f = 0x290; // Animator
		inline constexpr ::std::ptrdiff_t _5ef5fc01d17fe1ed17608a490b8d16033ebbe7ab = 0x298; // LODGroup
		inline constexpr ::std::ptrdiff_t _d6c115c6a34dde3694d9c4119aaee7fac6fbc389 = 0x2A0; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t _a626f6f0ad822fb10273958d91cb43ce3c27f356 = 0x2A8; // float
		inline constexpr ::std::ptrdiff_t _ebe30cc261d19091018f2a2303eb8e71b1d3c2de = 0x2AC; // bool
		inline constexpr ::std::ptrdiff_t _88fb15ab675b1489d0e66ad27ff096367a0d7b6d = 0x2AD; // bool
		inline constexpr ::std::ptrdiff_t _74dc20f21b8051348d24fee80d17bf7f435b5637 = 0x2B0; // int
		inline constexpr ::std::ptrdiff_t _faaa3477ba3a275f06228f3a5eb0593d8b076a69 = 0x2B4; // int
		inline constexpr ::std::ptrdiff_t _021f609fe5dcc94af1226634630a5f3a4f9e71d7 = 0x2B8; // HeldEntity
		inline constexpr ::std::ptrdiff_t _5252c9b08bc4f7c930c49594cdbdb08805c2c276 = 0x2C0; // bool
		inline constexpr ::std::ptrdiff_t _9a64cb1dcbccbc00d0239fd28fe40660dfb32b66 = 0x2C4; // float
		inline constexpr ::std::ptrdiff_t _e9e7d6d743f79e8c47f55d0e11f5f8983846eecc = 0x2C8; // float
		inline constexpr ::std::ptrdiff_t _6440e8f7ebe0779d59481e00eda4dcc7d604a1c4 = 0x2CC; // bool
		inline constexpr ::std::ptrdiff_t _0ff09d21572ff0e51a9a0f11bad00d1837d25b07 = 0x2D0; // Nullable<float>
		inline constexpr ::std::ptrdiff_t _585de6a1f827a4374dc6b5ac1f6d2487298c9c04 = 0x2D8; // List<BlendShapeController>
		inline constexpr ::std::ptrdiff_t _b46fa666dc26a0a7b59a217269d44fd846e8c7a7 = 0x2E0; // bool
		inline constexpr ::std::ptrdiff_t _a9133c973563509c8c1613ac40e2b4aa64cfb310 = 0x2E1; // bool
		inline constexpr ::std::ptrdiff_t _a69a59fa2a5175a35851644d8435c4f82a7018f4 = 0x2E2; // bool
		inline constexpr ::std::ptrdiff_t _f5e36a9a4c2273bd066d810fc237f67358c6c3d0 = 0x2E4; // TimeSince
		inline constexpr ::std::ptrdiff_t _68d6a37fc87503403e2d48cd5ac76a38b3cadb0a = 0x2E8; // TimeSince
		inline constexpr ::std::ptrdiff_t _22295335dc26df018fc98891f39e6c0f3d3a0ad1 = 0x2EC; // Vector3
		inline constexpr ::std::ptrdiff_t _3cb07bdc55ab6eeb4c0dd750b3c0077fb409add3 = 0x2F8; // Vector3
		inline constexpr ::std::ptrdiff_t _524383830a8b80db726c2c951c0ed9845ef843e1 = 0x304; // TimeSince
		inline constexpr ::std::ptrdiff_t _8dcab87627997e042f0bec880726bf28428ec864 = 0x308; // Vector3
		inline constexpr ::std::ptrdiff_t _1057f4f58c1aa16897317e4c7d16617d1b357389 = 0x314; // Vector3
		inline constexpr ::std::ptrdiff_t _702e97278993a906cfe34b2d1e68c1da6a9a5b21 = 0x320; // float
		inline constexpr ::std::ptrdiff_t _702567bd3858543563fa509e1ea5b75755297be7 = 0x324; // float
		inline constexpr ::std::ptrdiff_t _edd62eb271cd41db9bb79de04791062be9f88dee = 0x328; // Vector3
		inline constexpr ::std::ptrdiff_t _be0e3387c6a7930cc9799801d9eb54cb55caaf86 = 0x334; // bool
		inline constexpr ::std::ptrdiff_t _3b8e85d243dd15095b2fd751cd0d5e6986ca2693 = 0x338; // float
		inline constexpr ::std::ptrdiff_t _0bec49005cfa22e4fba4ea8f47069c1e0e8f77dc = 0x33C; // float
		inline constexpr ::std::ptrdiff_t _95777a25abb8815ff7174e4198a061859aff98f7 = 0x340; // Vector3
		inline constexpr ::std::ptrdiff_t _4143cecc81c680d2ed876ee95c53ed26fafb58b4 = 0x34C; // Vector3
		inline constexpr ::std::ptrdiff_t _69e250a93552b34835bd627e530bb70a81a96a16 = 0x358; // Vector3
		inline constexpr ::std::ptrdiff_t _f12c86d3f52e83942dd71153eecc93562efacee7 = 0x364; // Vector3
		inline constexpr ::std::ptrdiff_t _bd94f2bed2770083ca037930754817fd42678167 = 0x370; // float
		inline constexpr ::std::ptrdiff_t _09f32f32990d75b0d3428d162cbdbfff99e53ed4 = 0x374; // float
		inline constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[]
		inline constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[]
		inline constexpr ::std::ptrdiff_t _471a84a45c6257adce8cc8c327e4efb9616129c6 = 0x388; // List<SkinnedMeshRenderer>
		inline constexpr ::std::ptrdiff_t _f711174ee4cf84087b5e271bf5bc97f1627986f0 = 0x390; // List<WearableFadeToggle>
		inline constexpr ::std::ptrdiff_t _d2b2cb877b1a44b4215c5e2cd05b5e8ef61357d7 = 0x398; // Transform[]
		inline constexpr ::std::ptrdiff_t _7be6ddd069dd852c3f495beff594a292c3bb4c38 = 0x3A0; // float
		inline constexpr ::std::ptrdiff_t _a3c6417fdf037eced58e9f1c896dba7474f27313 = 0x3A4; // Nullable<bool>
		inline constexpr ::std::ptrdiff_t _dac38434da38ebc68bc698e36080561593e0a625 = 0x3A8; // float
	} // PlayerModel
	namespace ModelState {
		inline constexpr ::std::ptrdiff_t waterLevel = 0x10; // float
		inline constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
		inline constexpr ::std::ptrdiff_t flags = 0x20; // int
		inline constexpr ::std::ptrdiff_t poseType = 0x24; // int
		inline constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3
		inline constexpr ::std::ptrdiff_t ladderType = 0x34; // int
		inline constexpr ::std::ptrdiff_t guidePosition = 0x38; // Vector3
		inline constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
		inline constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
		inline constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
		inline constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
	} // ModelState
	namespace Item {
		inline constexpr ::std::ptrdiff_t UID = 0x10; // ItemId
		inline constexpr ::std::ptrdiff_t itemid = 0x18; // int
		inline constexpr ::std::ptrdiff_t slot = 0x1C; // int
		inline constexpr ::std::ptrdiff_t amount = 0x20; // int
		inline constexpr ::std::ptrdiff_t flags = 0x24; // int
		inline constexpr ::std::ptrdiff_t removetime = 0x28; // float
		inline constexpr ::std::ptrdiff_t locktime = 0x2C; // float
		inline constexpr ::std::ptrdiff_t worldEntity = 0x30; // NetworkableId
		inline constexpr ::std::ptrdiff_t instanceData = 0x38; // Item.InstanceData
		inline constexpr ::std::ptrdiff_t heldEntity = 0x40; // NetworkableId
		inline constexpr ::std::ptrdiff_t conditionData = 0x48; // Item.ConditionData
		inline constexpr ::std::ptrdiff_t name = 0x50; // string
		inline constexpr ::std::ptrdiff_t text = 0x58; // string
		inline constexpr ::std::ptrdiff_t skinid = 0x60; // ulong
		inline constexpr ::std::ptrdiff_t cooktime = 0x68; // float
		inline constexpr ::std::ptrdiff_t streamerName = 0x70; // string
		inline constexpr ::std::ptrdiff_t ammoCount = 0x78; // int
		inline constexpr ::std::ptrdiff_t contents = 0x80; // ItemContainer
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x88; // bool
	} // Item
	namespace ItemDefinition {
		inline constexpr ::std::ptrdiff_t itemid = 0x20; // int
		inline constexpr ::std::ptrdiff_t shortname = 0x28; // string
		inline constexpr ::std::ptrdiff_t displayName = 0x30; // Translate.Phrase
		inline constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
		inline constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite
		inline constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory
		inline constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel
		inline constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
		inline constexpr ::std::ptrdiff_t itemType = 0x54; // %d2f53bbf30540d591c2d217147c7418cfc738ca2.ContentsType
		inline constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType
		inline constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot
		inline constexpr ::std::ptrdiff_t stackable = 0x60; // int
		inline constexpr ::std::ptrdiff_t volume = 0x64; // int
		inline constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool
		inline constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool
		inline constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance
		inline constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity
		inline constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity
		inline constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool
		inline constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition
		inline constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition
		inline constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition
		inline constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition
		inline constexpr ::std::ptrdiff_t hidden = 0xB0; // bool
		inline constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag
		inline constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool
		inline constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem
		inline constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem
		inline constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition
		inline constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool
		inline constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool
		inline constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3
		inline constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition
		inline constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
		inline constexpr ::std::ptrdiff_t _ea3d719f2cd0e61c47fc4556135721fbf15124a0 = 0x108; // ItemMod[]
		inline constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag
		inline constexpr ::std::ptrdiff_t _7ce70d69aae4a06209fcaed9515a724779d49462 = 0x120; // IPlayerItemDefinition[]
		inline constexpr ::std::ptrdiff_t panel = 0x128; // GameObject
		inline constexpr ::std::ptrdiff_t _33677da721c54e20f41ca2e39f4eb39701319123 = 0x130; // ItemModWearable
		inline constexpr ::std::ptrdiff_t _7f76e376439d9ebeb4d73fb77acf94746c42b1f1 = 0x138; // ItemModBurnable
		inline constexpr ::std::ptrdiff_t _1a3394c8b2bd0adc6d4800b9354f1b731fa06921 = 0x140; // ItemModCookable
		inline constexpr ::std::ptrdiff_t _f3c3775b1677a2876df3c229c8b49256f26ec3c2 = 0x148; // bool
		inline constexpr ::std::ptrdiff_t _b313b569fef287a29acd4eafab7635df4f1973cc = 0x149; // bool
		inline constexpr ::std::ptrdiff_t _c86c5d62c4261f4244b57517c0d9a4555fb8ed64 = 0x14A; // bool
		inline constexpr ::std::ptrdiff_t _5a23d9cce9a2b7fd97fab7bf223565568861e6e1 = 0x150; // ItemDefinition[]
	} // ItemDefinition
	namespace DroppedItem {
		inline constexpr ::std::ptrdiff_t _a6506d417db46cfee886a22f3354f32a76a60d49 = 0x290; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x308; // string
		inline constexpr ::std::ptrdiff_t maxItemCount = 0x310; // int
		inline constexpr ::std::ptrdiff_t _0c02addb67d09500a751ebe2d99b8bc99f1d9430 = 0x318; // ulong
		inline constexpr ::std::ptrdiff_t _b36b79c8e0779b8dabc4224c9dbad407c2f805e5 = 0x320; // string
		inline constexpr ::std::ptrdiff_t ItemBasedDespawn = 0x328; // bool
		inline constexpr ::std::ptrdiff_t onlyOwnerLoot = 0x329; // bool
		inline constexpr ::std::ptrdiff_t openSound = 0x330; // SoundDefinition
		inline constexpr ::std::ptrdiff_t closeSound = 0x338; // SoundDefinition
	} // DroppedItem
	namespace WorldItem {
		inline constexpr ::std::ptrdiff_t allowPickup = 0x188; // bool
		inline constexpr ::std::ptrdiff_t _d24308f5cf9cc961d5e55c4bf20d8e97d930a9c2 = 0x190; // %033c0143fa8e095703c6e344a2a85833e3628b3e
	} // WorldItem
	namespace Model {
		inline constexpr ::std::ptrdiff_t collision = 0x20; // SphereCollider
		inline constexpr ::std::ptrdiff_t rootBone = 0x28; // Transform
		inline constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
		inline constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
		inline constexpr ::std::ptrdiff_t animator = 0x40; // Animator
		inline constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton
		inline constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[]
		inline constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
		inline constexpr ::std::ptrdiff_t _a24da29bd2f7ac0f74acb6846bd5c9bc8dd6ef6e = 0x60; // %d55d3c898db704adb56feae4e90f72d08d9ea282
		inline constexpr ::std::ptrdiff_t _774dd64dc9fdc70afa6610a849cf18bd1efbb60f = 0x68; // int
		inline constexpr ::std::ptrdiff_t _5ef5fc01d17fe1ed17608a490b8d16033ebbe7ab = 0x70; // LODGroup
	} // Model
	namespace RecoilProperties {
		inline constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // float
		inline constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
		inline constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
		inline constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float
		inline constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // float
		inline constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
		inline constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
		inline constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float
		inline constexpr ::std::ptrdiff_t clampPitch = 0x38; // float
		inline constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve
		inline constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve
		inline constexpr ::std::ptrdiff_t useCurves = 0x50; // bool
		inline constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool
		inline constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int
		inline constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float
		inline constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool
		inline constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve
		inline constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float
		inline constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties
	} // RecoilProperties
	namespace BaseFishingRod {
		inline constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef
		inline constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float
		inline constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer
		inline constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform
		inline constexpr ::std::ptrdiff_t _6a9b27a1ef99bee034f547f6b5727af3dc339114 = 0x238; // BaseFishingRod.CatchState
		inline constexpr ::std::ptrdiff_t _7f567cbfcc0b03da1fac6c6dc1483a1d7e0e24a6 = 0x23C; // BaseFishingRod.FishState
		inline constexpr ::std::ptrdiff_t _9a7fc51b9881877673f49d1b8140abeadfaaf9c5 = 0x240; // %815549d345a3e7fe543f9ec478d9901ad8e10820<FishingBobber>
		inline constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float
		inline constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float
		inline constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float
		inline constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float
		inline constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable
		inline constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef
		inline constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition
		inline constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition
		inline constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve
		inline constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition
		inline constexpr ::std::ptrdiff_t _82e5cbed789db13e63a41194adade0c314eb1f56 = 0x290; // Vector3[]
		inline constexpr ::std::ptrdiff_t _19117db6ada734476ad55640e3c8565f2b39c6b8 = 0x298; // Vector3[]
		inline constexpr ::std::ptrdiff_t _18aae3df10bdb9fa7b8cb8c1d61aec0aab8d7f94 = 0x2A0; // float[]
		inline constexpr ::std::ptrdiff_t _b55cbca5ae508635684e414139fa22119bb617d5 = 0x2A8; // float
		inline constexpr ::std::ptrdiff_t _eae3b615254d5cd914a5f12c6f0834a23813fdc8 = 0x2AC; // TimeUntil
		inline constexpr ::std::ptrdiff_t _bd4d4f794e9b9696193c28d2bfae5dd72282b868 = 0x2B0; // FishingRodViewmodel
		inline constexpr ::std::ptrdiff_t _e696e1648cbee5d17abd762838322b5540dd5a25 = 0x2B8; // BobberPreview
		inline constexpr ::std::ptrdiff_t _3dfb066255eb4bf190262a90ae1b49cd6e5e3607 = 0x2C0; // bool
		inline constexpr ::std::ptrdiff_t _6c324c3d4902470c9ed88b36f283d3ffbc53b1f2 = 0x2C8; // Sound
		inline constexpr ::std::ptrdiff_t _aef3999cbbbd9714ff3de6e966609729d5b3dc8b = 0x2D0; // Sound
		inline constexpr ::std::ptrdiff_t _7e1c04af9d0b86b78e43ffb9295225389f99471b = 0x2D8; // SoundModulation.Modulator
		inline constexpr ::std::ptrdiff_t _a1075e2e1eb5a827398a7678e07ffd599ee818cc = 0x2E0; // TimeUntil
		inline constexpr ::std::ptrdiff_t _ffb081215a0dbe64717bd85ffa465f17065ece3d = 0x2E4; // TimeSince
	} // BaseFishingRod
	namespace FishingBobber {
		inline constexpr ::std::ptrdiff_t centerOfMass = 0x290; // Transform
		inline constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody
		inline constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform
		inline constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform
		inline constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // float
		inline constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
		inline constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
		inline constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
		inline constexpr ::std::ptrdiff_t _c792925c33a3568bc62b8fe0f2b56d751cc93480 = 0x2C0; // float
		inline constexpr ::std::ptrdiff_t _8ee52b74e96b181dda6c65c54261c62ecae44dd1 = 0x2C4; // Vector3
	} // FishingBobber
	namespace OcclusionCulling {
		inline constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader
		inline constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // bool
		inline constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
		inline constexpr ::std::ptrdiff_t _85ed26a2f465403ae3f80a12362401b8f8feb857 = 0x30; // Camera
		inline constexpr ::std::ptrdiff_t _7106992ee99314be3ffba7e7a1c4772b4d6161fc = 0x58; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406
		inline constexpr ::std::ptrdiff_t _0a72295eb2156d8ed7dd0388850606061d565cd5 = 0x60; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406
		inline constexpr ::std::ptrdiff_t _31f42cd646dbac39acfa48e85419715fed764029 = 0x68; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406
		inline constexpr ::std::ptrdiff_t _d385568899771713e8603886d1a8939e19d07332 = 0x38; // Vector4[]
		inline constexpr ::std::ptrdiff_t _36c0fde7de5b82da2ebefb8547aa77c7b1898264 = 0x40; // string[]
		inline constexpr ::std::ptrdiff_t _2a8763e741c051b15abacffa79579a6bdac13edb = 0x48; // float[]
		inline constexpr ::std::ptrdiff_t _0606b54a7455a1a12ca3652416f2ebf41be2668e = 0x50; // Material
		inline constexpr ::std::ptrdiff_t _d3a8f82370a120a6b92b7d344f4cebbc3833124e = 0x58; // Material
		inline constexpr ::std::ptrdiff_t _be991e77775611c8a8596593b308804511f8fcf1 = 0x60; // Matrix4x4
		inline constexpr ::std::ptrdiff_t _b0341563ba32da165db8c3f6fa28d5dc888ecd85 = 0xA0; // Matrix4x4
		inline constexpr ::std::ptrdiff_t _e299da2da740c28025534d6170c3abec2dbd6cf8 = 0xE0; // Matrix4x4
		inline constexpr ::std::ptrdiff_t _7ae21fa74e1de52c9408fec3dc5a4dd4f3371bff = 0x120; // Matrix4x4
		inline constexpr ::std::ptrdiff_t _e55c80f2aa17aa9e4728fe3beee064de632f3a1e = 0x160; // Matrix4x4
		inline constexpr ::std::ptrdiff_t _7d7e30a306ce795be5c68fa845e932b82c5cd950 = 0x1A0; // bool
		inline constexpr ::std::ptrdiff_t _4a7e10bf26b127e3b57956e908297f743c5fb41d = 0x70; // OcclusionCulling
		inline constexpr ::std::ptrdiff_t _21bea57cd996f691333834d5d3f0819405c8a4d1 = 0x78; // bool
		inline constexpr ::std::ptrdiff_t _0e6511cce8fd76ee1dc4656ff3e1766587e9d3af = 0x88; // bool
		inline constexpr ::std::ptrdiff_t _cb5cddf86c33455c14d9bad26502e40d5e44f25b = 0x89; // bool
		inline constexpr ::std::ptrdiff_t _a008487e45f0fb460e00e01720fcf211954b15b3 = 0x8C; // OcclusionCulling.DebugFilter
		inline constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings
		inline constexpr ::std::ptrdiff_t _468544642f3512ef0d5362f4934a02ca3f7b9d3d = 0x1B0; // Material
		inline constexpr ::std::ptrdiff_t _7a746db0abecd2d346711a1fdceebfdc6a3ba4e8 = 0x1B8; // Material
		inline constexpr ::std::ptrdiff_t _29933836483665a80c4fc98859e987521acd81ff = 0x1C0; // Material
		inline constexpr ::std::ptrdiff_t _083854040a749e40dd31852d3a0c1d3c710348c3 = 0x1C8; // int
		inline constexpr ::std::ptrdiff_t _ce5d4575dd976b948f3815a4ff81a6d7376c3a68 = 0x1CC; // int
		inline constexpr ::std::ptrdiff_t _8a0fddba348ef78292dbf8a6c14d8fa43360da35 = 0x1D0; // int
		inline constexpr ::std::ptrdiff_t _dcab8dec19b06004ea6c783087cc64eeb81ca667 = 0x1D8; // RenderTexture
		inline constexpr ::std::ptrdiff_t _24554ec4a9a9a6bb31fd922cc366381d888ffd7a = 0x1E0; // RenderTexture
		inline constexpr ::std::ptrdiff_t _f050325366dee09af015981f091fe2cebd1dad86 = 0x1E8; // RenderTexture[]
	} // OcclusionCulling
	namespace OcclusionCulling_DebugSettings {
		inline constexpr ::std::ptrdiff_t log = 0x10; // bool
		inline constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
		inline constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
		inline constexpr ::std::ptrdiff_t showMain = 0x13; // bool
		inline constexpr ::std::ptrdiff_t showMainLod = 0x14; // int
		inline constexpr ::std::ptrdiff_t showFallback = 0x18; // bool
		inline constexpr ::std::ptrdiff_t showStats = 0x19; // bool
		inline constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool
		inline constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask
		inline constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask
	} // OcclusionCulling_DebugSettings
}