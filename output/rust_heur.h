#pragma once
#include <cstdint>

// Offsets updated by: https://github.com/etr-dev/Rust-Data
// Saturday, 10/19/2024 - 4:14:30PM EST
// BuildId: 15958008
// Based on heuristic offset comparisons. Use with caution.

namespace HeurRustOffsets {
	inline constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x3c8df20; // BaseEntity_TypeInfo
	inline constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x3c59120; // Facepunch_Input_TypeInfo
	inline constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x3c701c8; // MainCamera_TypeInfo
	inline constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode__TypeInfo = 0x3caa9b8; // System_Collections_Generic_List_BaseGameMode__TypeInfo
	inline constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x3c8e188; // BaseGameMode_TypeInfo
	namespace BasePlayer {
		inline constexpr ::std::ptrdiff_t _f58252d68b0c36a8bbec7510d27a20efc311304d = 0x290; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _8b0247a75a2b33e9e5e590626a32ffc132d2ef0f = 0x308; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _70ec114e7b39e844d194bd90e48fff7a256a075c = 0x380; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _072d57560599d5e24a785d0bcf079d51242bd243 = 0x3F8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _97cb9bc31e67f4ca1409e9186a4fc897a2add0fc = 0x470; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _7204267f90dbb98fea8b1533305e7605151601e7 = 0x4E8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _73453b2af392b334e71a9594997477325532aa1f = 0x560; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _cc6ee030e8f4a10bcc999a4b6e9e1702289a5e2c = 0x5D8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _268bde70604aa72a7d58d59248ef5115673c877b = 0x650; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _c38711f0fbdc02218ad17f5e9748ce0b29489646 = 0x6C8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _0129555b6f2a5cfbf8e0a37babfc68eb1bed99bd = 0x740; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t __menuOption_SaltWater = 0x7B8; // %85780758c8d4d2918511283d6f6204cc96c14526 (0.325)
		inline constexpr ::std::ptrdiff_t clanId = 0x830; // long (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t playerModel = 0x838; // PlayerModel (0.4083333333333334)
		inline constexpr ::std::ptrdiff_t Frozen = 0x840; // bool (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t LookLocked = 0x841; // bool (0.575)
		inline constexpr ::std::ptrdiff_t voiceRecorder = 0x848; // PlayerVoiceRecorder (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t voiceSpeaker = 0x850; // PlayerVoiceSpeaker (0.5666666666666667)
		inline constexpr ::std::ptrdiff_t input = 0x858; // PlayerInput (0.65)
		inline constexpr ::std::ptrdiff_t movement = 0x860; // BaseMovement (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t collision = 0x868; // BaseCollision (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t bagCount = 0x870; // int (0.8249999999999998)
		inline constexpr ::std::ptrdiff_t shelterCount = 0x874; // int (0.8250000000000001)
		inline constexpr ::std::ptrdiff_t modelInitUnderwear = 0x878; // uint (0.7666666666666667)
		inline constexpr ::std::ptrdiff_t _lookingAt = 0x880; // GameObject (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t _lookingAtEntity = 0x888; // BaseEntity (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t _lookingAtCollider = 0x890; // Collider (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t lookingAtPoint = 0x898; // Vector3 (0.4749999999999999)
		inline constexpr ::std::ptrdiff_t wakeTime = 0x8A4; // float (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t needsClothesRebuild = 0x8A8; // bool (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t wasSleeping = 0x8A9; // bool (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t wokeUpBefore = 0x8AA; // bool (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t wasDead = 0x8AB; // bool (0.4249999999999999)
		inline constexpr ::std::ptrdiff_t HasMountedClothing = 0x8AC; // bool (0.425)
		inline constexpr ::std::ptrdiff_t HasWearableClothing = 0x8AD; // bool (0.425)
		inline constexpr ::std::ptrdiff_t lastClothesHash = 0x8B0; // uint (0.425)
		inline constexpr ::std::ptrdiff_t lastOpenSoundPlay = 0x8B4; // TimeSince (0.425)
		inline constexpr ::std::ptrdiff_t currentViewMode = 0x8B8; // BasePlayer.CameraMode (0.5666666666666667)
		inline constexpr ::std::ptrdiff_t selectedViewMode = 0x8BC; // BasePlayer.CameraMode (0.5666666666666667)
		inline constexpr ::std::ptrdiff_t lastRevivePoint = 0x8C0; // Vector3 (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t lastReviveDirection = 0x8CC; // Vector3 (0.6)
		inline constexpr ::std::ptrdiff_t IsWearingDiveGoggles = 0x8D8; // bool (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t GestureViewModel = 0x8E0; // ViewModel (0.6)
		inline constexpr ::std::ptrdiff_t currentClientRespawnInformation = 0x8E8; // RespawnInformation (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t respawnOptionsTimestamp = 0x8F0; // float (0.6)
		inline constexpr ::std::ptrdiff_t lastParachuteRequest = 0x8F4; // TimeSince (0.6249999999999999)
		inline constexpr ::std::ptrdiff_t timeSinceUpdatedLookingAt = 0x8F8; // RealTimeSince (0.5666666666666665)
		inline constexpr ::std::ptrdiff_t nextTopologyTestTime = 0x8FC; // float (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t usePressTime = 0x900; // float (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t useHeldTime = 0x904; // float (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t _0543be5bd79d5b70345a09fce2c61015cd229ed5 = 0x908; // %0cc4e8f92534588060d226fb379b0b347a54d66f
		inline constexpr ::std::ptrdiff_t lookingAtTest = 0x910; // Vector3 (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t cachedWaterDrinkingPoint = 0x91C; // bool (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t hasRequestedServerEmoji = 0x928; // Queue<string> (0.49166666666666664)
		inline constexpr ::std::ptrdiff_t gestureList = 0x930; // GestureCollection (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t gestureFinishedTime = 0x938; // TimeUntil (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t blockHeldInputTimer = 0x93C; // TimeSince (0.35833333333333334)
		inline constexpr ::std::ptrdiff_t currentGesture = 0x940; // GestureConfig (0.35833333333333334)
		inline constexpr ::std::ptrdiff_t disabledHeldEntity = 0x948; // HeldEntity (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t nextGestureMenuOpenTime = 0x950; // float (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t lastGestureCancel = 0x954; // float (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t client_lastHelloTime = 0x958; // ulong (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t currentTeam = 0x960; // PlayerTeam (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t clientTeam = 0x968; // ListHashSet<ulong> (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t lastReceivedTeamTime = 0x970; // float (0.325)
		inline constexpr ::std::ptrdiff_t lastPresenceTeamId = 0x978; // ulong (0.325)
		inline constexpr ::std::ptrdiff_t lastPresenceTeamSize = 0x980; // int (0.325)
		inline constexpr ::std::ptrdiff_t playerGroupKey = 0x988; // string (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t playerGroupSizeKey = 0x990; // string (0.29166666666666663)
		inline constexpr ::std::ptrdiff_t clActiveItem = 0x998; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<ItemId> (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t ClientCurrentMapNotes = 0x9A0; // List<MapNote> (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t ClientCurrentDeathNote = 0x9A8; // MapNote (0.37499999999999994)
		inline constexpr ::std::ptrdiff_t keepOpenMapInterface = 0x9B0; // bool (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t missions = 0x9B8; // List<BaseMission.%715ea160206478141de36208dc3668b6fdcd50a0> (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t _activeMission = 0x9C0; // int (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t modelState = 0x9C8; // ModelState (0.31666666666666665)
		inline constexpr ::std::ptrdiff_t mounted = 0x9D0; // %83c2390e34d517ee638c8fe387ab0e02280cd630 (0.4833333333333332)
		inline constexpr ::std::ptrdiff_t nextSeatSwapTime = 0x9E0; // float (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t mountInputHeldDuringDismount = 0x9E4; // bool (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t PetEntity = 0x9E8; // BaseEntity (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t lastPetCommandIssuedTime = 0x9F0; // float (0.48333333333333334)
		inline constexpr ::std::ptrdiff_t PetPrefabID = 0x9F4; // uint (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t PetID = 0x9F8; // NetworkableId (0.425)
		inline constexpr ::std::ptrdiff_t ClientCurrentPings = 0xA00; // List<MapNote> (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t tapInProcess = 0xA08; // bool (0.5083333333333333)
		inline constexpr ::std::ptrdiff_t lastPingTap = 0xA0C; // TimeSince (0.4499999999999999)
		inline constexpr ::std::ptrdiff_t cachedBuildingPrivilegeTime = 0xA10; // float (0.5083333333333333)
		inline constexpr ::std::ptrdiff_t cachedBuildingPrivilege = 0xA18; // BuildingPrivlidge (0.44999999999999996)
		inline constexpr ::std::ptrdiff_t cachedVehicleBuildingBlockedTime = 0xA20; // float (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t cachedVehicleBuildingBlocked = 0xA24; // bool (0.5083333333333333)
		inline constexpr ::std::ptrdiff_t cachedEntityBuildingBlockedTime = 0xA28; // float (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t cachedEntityBuildingBlocked = 0xA2C; // bool (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t cachedPrivilegeFromOther = 0xA30; // BaseEntity (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t cachedPrivilegeFromOtherTime = 0xA38; // float (0.425)
		inline constexpr ::std::ptrdiff_t maxProjectileID = 0xA3C; // int (0.3416666666666666)
		inline constexpr ::std::ptrdiff_t clientTickRate = 0xA40; // TimeSince (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t serverTickInterval = 0xA44; // float (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t clientTickInterval = 0xA48; // float (0.29166666666666663)
		inline constexpr ::std::ptrdiff_t lastSentTickTime = 0xA4C; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float> (0.3416666666666666)
		inline constexpr ::std::ptrdiff_t lastTickStopwatch = 0xA50; // Stopwatch (0.28333333333333327)
		inline constexpr ::std::ptrdiff_t lastSentTick = 0xA58; // PlayerTick (0.3416666666666666)
		inline constexpr ::std::ptrdiff_t CurrentTutorialAllowance = 0xA60; // BasePlayer.TutorialItemAllowance (0.4833333333333332)
		inline constexpr ::std::ptrdiff_t startTutorialCooldown = 0xA64; // float (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t nextVisThink = 0xA68; // float (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t lastTimeSeen = 0xA6C; // float (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t debugPrevVisible = 0xA70; // bool (0.49166666666666664)
		inline constexpr ::std::ptrdiff_t fallDamageEffect = 0xA78; // GameObjectRef (0.43333333333333335)
		inline constexpr ::std::ptrdiff_t drownEffect = 0xA80; // GameObjectRef (0.43333333333333335)
		inline constexpr ::std::ptrdiff_t playerFlags = 0xA88; // BasePlayer.PlayerFlags (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t eyes = 0xA90; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<PlayerEyes> (0.4916666666666667)
		inline constexpr ::std::ptrdiff_t inventory = 0xA98; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<PlayerInventory> (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t blueprints = 0xAA0; // PlayerBlueprints (0.44166666666666665)
		inline constexpr ::std::ptrdiff_t metabolism = 0xAA8; // PlayerMetabolism (0.5)
		inline constexpr ::std::ptrdiff_t modifiers = 0xAB0; // PlayerModifiers (0.44166666666666665)
		inline constexpr ::std::ptrdiff_t playerCollider = 0xAB8; // %d350490b07bc1b1d855ecf0a8c8d1355e4382d2e<CapsuleCollider> (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t Belt = 0xAC0; // %ba9edea0fbdb1007d59fa951cbc3bfb44cf2adbe (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t playerRigidbody = 0xAC8; // Rigidbody (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t userID = 0xAD0; // BasePlayer.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<ulong> (0.6333333333333333)
		inline constexpr ::std::ptrdiff_t UserIDString = 0xAD8; // string (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t gamemodeteam = 0xAE0; // int (0.44166666666666665)
		inline constexpr ::std::ptrdiff_t reputation = 0xAE4; // int (0.35833333333333334)
		inline constexpr ::std::ptrdiff_t _displayName = 0xAE8; // string (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t _lastSetName = 0xAF0; // string (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t playerColliderStanding = 0xAF8; // BasePlayer.CapsuleColliderInfo (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t playerColliderDucked = 0xB0C; // BasePlayer.CapsuleColliderInfo (0.45833333333333326)
		inline constexpr ::std::ptrdiff_t playerColliderCrawling = 0xB20; // BasePlayer.CapsuleColliderInfo (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t playerColliderLyingDown = 0xB34; // BasePlayer.CapsuleColliderInfo (0.3999999999999999)
		inline constexpr ::std::ptrdiff_t cachedProtection = 0xB48; // ProtectionProperties (0.3166666666666666)
		inline constexpr ::std::ptrdiff_t lastHeadshotSoundTime = 0xB50; // float (0.3166666666666666)
		inline constexpr ::std::ptrdiff_t nextColliderRefreshTime = 0xB54; // float (0.2583333333333333)
		inline constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xB58; // float (0.28333333333333327)
		inline constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xB5C; // bool (0.36666666666666664)
		inline constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xB60; // float (0.44999999999999996)
		inline constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xB64; // float (0.49090909090909085)
		inline constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xB68; // float (0.44000000000000006)
		inline constexpr ::std::ptrdiff_t equippingBlocked = 0xB6C; // bool (0.4555555555555555)
		inline constexpr ::std::ptrdiff_t eggVision = 0xB70; // float (0.475)
		inline constexpr ::std::ptrdiff_t activeTelephone = 0xB78; // PhoneController (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t designingAIEntity = 0xB80; // BaseEntity (0.4166666666666667)
	} // BasePlayer
	namespace BaseEntity {
		inline constexpr ::std::ptrdiff_t _6a5ce6395f4d1e88ae81cdbb454a09f91638a574 = 0x80; // Ragdoll
		inline constexpr ::std::ptrdiff_t syncPosition = 0x88; // %4fe3d712d6c754a8ea1800bed15d1a07adce13a7 (0.4714285714285714)
		inline constexpr ::std::ptrdiff_t _fd7108c5a3c08e2f8c40b99924ff09c8c0983c09 = 0x90; // float
		inline constexpr ::std::ptrdiff_t _eaecaea2adb384572cd48f3d67fcac7057c57ba8 = 0x98; // List<%85780758c8d4d2918511283d6f6204cc96c14526>
		inline constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
		inline constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
		inline constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
		inline constexpr ::std::ptrdiff_t model = 0xC8; // Model (0.37499999999999994)
		inline constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags (0.4833333333333332)
		inline constexpr ::std::ptrdiff_t parentBone = 0xD4; // uint (0.4833333333333332)
		inline constexpr ::std::ptrdiff_t skinID = 0xD8; // ulong (0.3999999999999999)
		inline constexpr ::std::ptrdiff_t _components = 0xE0; // EntityComponentBase[] (0.36666666666666664)
		inline constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool (0.31666666666666665)
		inline constexpr ::std::ptrdiff_t _name = 0xF0; // string (0.31666666666666665)
		inline constexpr ::std::ptrdiff_t OwnerID = 0xF8; // ulong (0.375)
		inline constexpr ::std::ptrdiff_t broadcastProtocol = 0x100; // uint (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t links = 0x108; // List<%6db8f07905a90c6260d974d4db822885fbd04612> (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t linkedToNeighbours = 0x110; // bool (0.5750000000000001)
		inline constexpr ::std::ptrdiff_t _pendingFileRequests = 0x118; // List<BaseEntity.%d12f47322b328a10cb9b3fd1adaaa70982bbfbc6> (0.6)
		inline constexpr ::std::ptrdiff_t updateParentingAction = 0x120; // Action (0.4916666666666667)
		inline constexpr ::std::ptrdiff_t addedToParentEntity = 0x128; // BaseEntity (0.43333333333333335)
		inline constexpr ::std::ptrdiff_t itemSkin = 0x130; // ItemSkin (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t successCallback = 0x138; // Action (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t failureCallback = 0x140; // Action (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t entitySlots = 0x148; // %83c2390e34d517ee638c8fe387ab0e02280cd630[] (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t triggers = 0x150; // List<TriggerBase> (0.5636363636363636)
		inline constexpr ::std::ptrdiff_t isVisible = 0x158; // bool (0.48999999999999994)
		inline constexpr ::std::ptrdiff_t isAnimatorVisible = 0x159; // bool (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t isShadowVisible = 0x15A; // bool (0.36249999999999993)
		inline constexpr ::std::ptrdiff_t localOccludee = 0x160; // %f540cd8dd3186d5ac8083499fdc1e768b85989a0 (0.31428571428571433)
		inline constexpr ::std::ptrdiff_t Weight = 0x180; // float (0.15)
	} // BaseEntity
	namespace BaseCombatEntity {
		inline constexpr ::std::ptrdiff_t lifestate = 0x188; // %85780758c8d4d2918511283d6f6204cc96c14526 (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
		inline constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties (0.23750000000000002)
		inline constexpr ::std::ptrdiff_t startHealth = 0x210; // float (0.3222222222222222)
		inline constexpr ::std::ptrdiff_t ShowHealthInfo = 0x218; // BaseCombatEntity.Pickup (0.31999999999999995)
		inline constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
		inline constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
		inline constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
		inline constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool (0.2583333333333333)
		inline constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool (0.19999999999999998)
		inline constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool (0.19090909090909092)
		inline constexpr ::std::ptrdiff_t _health = 0x27C; // float (0.21000000000000002)
		inline constexpr ::std::ptrdiff_t _maxHealth = 0x280; // float (0.23333333333333334)
		inline constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction (0.2625)
		inline constexpr ::std::ptrdiff_t deathTime = 0x288; // float (0.2571428571428572)
		inline constexpr ::std::ptrdiff_t lastNotifyFrame = 0x28C; // int (0.25)
	} // BaseCombatEntity
	namespace BaseCorpse {
		inline constexpr ::std::ptrdiff_t prefabRagdoll = 0x290; // GameObjectRef (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t parentEnt = 0x298; // BaseEntity (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t resourceDispenser = 0x2A0; // ResourceDispenser (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t rigidBody = 0x2A8; // Rigidbody (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t blockDamageIfNotGather = 0x2B0; // bool (1)
		inline constexpr ::std::ptrdiff_t ragdollObject = 0x2B8; // GameObject (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t ragdollObjScript = 0x2C0; // Ragdoll (0.8833333333333333)
	} // BaseCorpse
	namespace LootableCorpse {
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x2C8; // %85780758c8d4d2918511283d6f6204cc96c14526 (0.5199999999999999)
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x340; // string
		inline constexpr ::std::ptrdiff_t playerSteamID = 0x348; // ulong (0.6599999999999999)
		inline constexpr ::std::ptrdiff_t streamerName = 0x350; // string (0.5199999999999999)
		inline constexpr ::std::ptrdiff_t _c97dd73cd097def9d7042d12815cd15a919fa6df = 0x358; // string
		inline constexpr ::std::ptrdiff_t blockBagDrop = 0x360; // bool (0.6599999999999999)
	} // LootableCorpse
	namespace PlayerCorpse {
		inline constexpr ::std::ptrdiff_t buoyancy = 0x368; // Buoyancy (0.5199999999999999)
		inline constexpr ::std::ptrdiff_t underwearSkin = 0x370; // uint (0.6599999999999999)
		inline constexpr ::std::ptrdiff_t bonePosData = 0x378; // PlayerBonePosData (0.5199999999999999)
		inline constexpr ::std::ptrdiff_t CorpseRagdollScript = 0x380; // Ragdoll (0.5199999999999999)
		inline constexpr ::std::ptrdiff_t lastClothes = 0x388; // %d2f53bbf30540d591c2d217147c7418cfc738ca2 (0.6599999999999999)
		inline constexpr ::std::ptrdiff_t _244057a0411e37c8d1ccd86d6937c94767c303cf = 0x390; // uint
	} // PlayerCorpse
	namespace BuildingPrivlidge {
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_RotateVM = 0x4A0; // %85780758c8d4d2918511283d6f6204cc96c14526 (0.16666666666666666)
		inline constexpr ::std::ptrdiff_t _761b49940314724df628962a24874902930acee1 = 0x518; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _ee6e5dcf655e479192364c159364a84b73b42a1c = 0x590; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _3f31ff5d1f4665d6e2b34a032c2a8c57f8ded0c5 = 0x608; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _085b6a8f32686f893934cc09a86f4f830ce5f2e5 = 0x680; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t _f0944a973f6641f6db2e7510a9610b1e74405099 = 0x6F8; // %85780758c8d4d2918511283d6f6204cc96c14526
		inline constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
		inline constexpr ::std::ptrdiff_t assignDialog = 0x778; // HashSet<PlayerNameID> (0.125)
		inline constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition> (0.20833333333333334)
		inline constexpr ::std::ptrdiff_t cachedProtectedMinutes = 0x788; // float (0.2)
		inline constexpr ::std::ptrdiff_t cachedUpkeepPeriodMinutes = 0x78C; // float (0.22000000000000003)
		inline constexpr ::std::ptrdiff_t cachedUpkeepCostFraction = 0x790; // float (0.24444444444444446)
		inline constexpr ::std::ptrdiff_t clientAuthed = 0x794; // bool (0.275)
		inline constexpr ::std::ptrdiff_t clientAnyAuthed = 0x795; // bool (0.31428571428571433)
		inline constexpr ::std::ptrdiff_t lastProtectedMinuteUpdate = 0x798; // DateTime (0.25)
	} // BuildingPrivlidge
	namespace BaseProjectile {
		inline constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float (0.3)
		inline constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t attackFX = 0x2A8; // float (0.475)
		inline constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t turretDamageScale = 0x2B0; // bool (0.55)
		inline constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
		inline constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
		inline constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
		inline constexpr ::std::ptrdiff_t createdProjectiles = 0x2C0; // GameObjectRef (0.09999999999999999)
		inline constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef (0.44999999999999996)
		inline constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D0; // Transform (0.44999999999999996)
		inline constexpr ::std::ptrdiff_t reloadTime = 0x2D8; // float (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2DC; // bool (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t primaryMagazine = 0x2E0; // BaseProjectile.Magazine (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t fractionalReload = 0x2E8; // bool (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t reloadStartDuration = 0x2EC; // float (0.5083333333333332)
		inline constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F0; // float (0.44999999999999996)
		inline constexpr ::std::ptrdiff_t reloadEndDuration = 0x2F4; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t aimSway = 0x2F8; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t aimSwaySpeed = 0x2FC; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t recoil = 0x300; // RecoilProperties (0.3583333333333332)
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x308; // AnimationCurve (0.3583333333333332)
		inline constexpr ::std::ptrdiff_t aimCone = 0x310; // float (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t hipAimCone = 0x314; // float (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x318; // float (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x31C; // float (0.4166666666666665)
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x320; // float (0.4166666666666665)
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x324; // float (0.3583333333333332)
		inline constexpr ::std::ptrdiff_t hasADS = 0x328; // float (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t hasADS = 0x32C; // bool
		inline constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x32D; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t manualCycle = 0x32E; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t needsCycle = 0x32F; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t isCycling = 0x330; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t aiming = 0x331; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x332; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t isBurstWeapon = 0x333; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t canChangeFireModes = 0x334; // bool (0.29999999999999993)
		inline constexpr ::std::ptrdiff_t defaultOn = 0x335; // bool (0.27499999999999997)
		inline constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x338; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x33C; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x340; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t resetDuration = 0x344; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t numShotsFired = 0x348; // int (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t nextReloadTime = 0x34C; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float> (0.27499999999999997)
		inline constexpr ::std::ptrdiff_t startReloadTime = 0x350; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float> (0.27499999999999997)
		inline constexpr ::std::ptrdiff_t stancePenalty = 0x354; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t aimconePenalty = 0x358; // float (0.24999999999999997)
		inline constexpr ::std::ptrdiff_t cachedModHash = 0x35C; // uint (0.3083333333333333)
		inline constexpr ::std::ptrdiff_t sightAimConeScale = 0x360; // float (0.3083333333333333)
		inline constexpr ::std::ptrdiff_t sightAimConeOffset = 0x364; // float (0.2833333333333333)
		inline constexpr ::std::ptrdiff_t hipAimConeScale = 0x368; // float (0.3083333333333333)
		inline constexpr ::std::ptrdiff_t hipAimConeOffset = 0x36C; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t isReloading = 0x370; // bool (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t timeSinceReloadFinished = 0x374; // TimeSince (0.3333333333333333)
		inline constexpr ::std::ptrdiff_t swaySampleTime = 0x378; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t lastShotTime = 0x37C; // BaseProjectile.%70b3f71e35ad742e4d06db7f548b51eef7ff4323<float> (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t reloadPressTime = 0x380; // float (0.3916666666666666)
		inline constexpr ::std::ptrdiff_t ammoTypePreReload = 0x388; // ItemDefinition (0.33333333333333326)
		inline constexpr ::std::ptrdiff_t fractionalReloadDesiredCount = 0x390; // int (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t fractionalReloadNumAdded = 0x394; // int (0.41)
		inline constexpr ::std::ptrdiff_t currentBurst = 0x398; // int (0.3444444444444444)
		inline constexpr ::std::ptrdiff_t triggerReady = 0x39C; // bool (0.35)
		inline constexpr ::std::ptrdiff_t nextHeightCheckTime = 0x3A0; // float (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t cachedUnderground = 0x3A4; // bool (0.4166666666666667)
	} // BaseProjectile
	namespace Magazine {
		inline constexpr ::std::ptrdiff_t capacity = 0x18; // int
		inline constexpr ::std::ptrdiff_t contents = 0x1C; // int
		inline constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x20; // ItemDefinition (0.075)
		inline constexpr ::std::ptrdiff_t contents = 0x28; // bool (0.4)
		inline constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
	} // Magazine
	namespace PlayerInventory {
		inline constexpr ::std::ptrdiff_t returnItems = 0x28; // %d2f53bbf30540d591c2d217147c7418cfc738ca2 (0.3333333333333333)
		inline constexpr ::std::ptrdiff_t _502bbbc294478a0026fd0709184bf12a2a776f49 = 0x30; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t _75a48d39abea63c94032284c013b42c12e4d45f8 = 0x38; // %d2f53bbf30540d591c2d217147c7418cfc738ca2
		inline constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
		inline constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot (0.14285714285714285)
		inline constexpr ::std::ptrdiff_t cachedResult = 0x50; // List<ItemIcon> (0.2857142857142857)
		inline constexpr ::std::ptrdiff_t _37cd29477f4bce6ad11dc51ff17738eed1fcc8cf = 0x58; // PlayerInventory.%00680e0d78d57a1d4a75b71324aa4f1ac4b4ae45
		inline constexpr ::std::ptrdiff_t _b201f973eaa178625a459cf2d598aa9923f366f8 = 0x68; // List<%033c0143fa8e095703c6e344a2a85833e3628b3e>
	} // PlayerInventory
	namespace ItemContainer {
		inline constexpr ::std::ptrdiff_t playerOwner = 0x10; // ItemContainerId (0.049999999999999996)
		inline constexpr ::std::ptrdiff_t slots = 0x18; // int
		inline constexpr ::std::ptrdiff_t entityOwner = 0x1C; // float (0.1625)
		inline constexpr ::std::ptrdiff_t isServer = 0x20; // int (0.075)
		inline constexpr ::std::ptrdiff_t allowedContents = 0x24; // int
		inline constexpr ::std::ptrdiff_t maxStackSize = 0x28; // int
		inline constexpr ::std::ptrdiff_t containerVolume = 0x30; // List<int> (0.049999999999999996)
		inline constexpr ::std::ptrdiff_t maxStackSize = 0x38; // List<int> (0.08571428571428572)
		inline constexpr ::std::ptrdiff_t volume = 0x40; // int
		inline constexpr ::std::ptrdiff_t contents = 0x48; // List<Item>
		inline constexpr ::std::ptrdiff_t parent = 0x50; // bool (0.049999999999999996)
	} // ItemContainer
	namespace PlayerModel {
		inline constexpr ::std::ptrdiff_t blinkController = 0x20; // BoxCollider (1)
		inline constexpr ::std::ptrdiff_t headBone = 0x28; // GameObject (1)
		inline constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
		inline constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
		inline constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
		inline constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
		inline constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController (0.9166666666666666)
		inline constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
		inline constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[] (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform (0.8583333333333334)
		inline constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform (0.8583333333333334)
		inline constexpr ::std::ptrdiff_t fadeToggles = 0x78; // Transform (0.2222222222222222)
		inline constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform (0.8583333333333334)
		inline constexpr ::std::ptrdiff_t extraLeanBack = 0x88; // Vector3 (0.2857142857142857)
		inline constexpr ::std::ptrdiff_t timeInArmsMode = 0x94; // bool (0.3333333333333333)
		inline constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3 (0.8833333333333334)
		inline constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3 (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3 (0.8833333333333333)
		inline constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3 (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar (0.9416666666666668)
		inline constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar (0.9166666666666666)
		inline constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController (0.9166666666666666)
		inline constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController (0.8333333333333334)
		inline constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController (0.75)
		inline constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
		inline constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController (0.7166666666666668)
		inline constexpr ::std::ptrdiff_t CurrentGesture = 0x150; // RuntimeAnimatorController (0.7416666666666668)
		inline constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t skinColor = 0x174; // float (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t skinNumber = 0x178; // float (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t hairNumber = 0x180; // float (0.47499999999999987)
		inline constexpr ::std::ptrdiff_t skinType = 0x184; // int (0.4749999999999999)
		inline constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds (0.4166666666666667)
		inline constexpr ::std::ptrdiff_t showSash = 0x190; // bool (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int (0.5916666666666667)
		inline constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t overrideSkinSeed = 0x1A0; // ulong (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t AimAngles = 0x1A8; // Quaternion (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t LookAngles = 0x1B8; // Quaternion (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t modelState = 0x1C8; // ModelState (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t position = 0x1D0; // Vector3 (0.7666666666666667)
		inline constexpr ::std::ptrdiff_t velocity = 0x1DC; // Vector3 (0.8250000000000001)
		inline constexpr ::std::ptrdiff_t speedOverride = 0x1E8; // Vector3 (0.8833333333333334)
		inline constexpr ::std::ptrdiff_t newVelocity = 0x1F4; // Vector3 (0.8833333333333334)
		inline constexpr ::std::ptrdiff_t rotation = 0x200; // Quaternion (0.8250000000000002)
		inline constexpr ::std::ptrdiff_t mountedRotation = 0x210; // Quaternion (0.7666666666666669)
		inline constexpr ::std::ptrdiff_t fallingTime = 0x220; // float (0.7666666666666669)
		inline constexpr ::std::ptrdiff_t smoothLeftFootIK = 0x224; // Vector3 (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t smoothRightFootIK = 0x230; // Vector3 (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t drawShadowOnly = 0x23C; // bool (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t isIncapacitated = 0x23D; // bool (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t flinchLocation = 0x240; // uint (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t visible = 0x244; // bool (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t nameTag = 0x248; // PlayerNameTag (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t animatorNeedsWarmup = 0x250; // bool (0.5916666666666667)
		inline constexpr ::std::ptrdiff_t isLocalPlayer = 0x251; // bool (0.5916666666666667)
		inline constexpr ::std::ptrdiff_t aimSoundDef = 0x258; // SoundDefinition (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t aimEndSoundDef = 0x260; // SoundDefinition (0.65)
		inline constexpr ::std::ptrdiff_t InGesture = 0x268; // bool (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t CurrentGestureConfig = 0x270; // GestureConfig (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t InCinematic = 0x278; // bool (0.7666666666666667)
		inline constexpr ::std::ptrdiff_t defaultAnimatorController = 0x280; // RuntimeAnimatorController (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t _multiMesh = 0x288; // SkinnedMultiMesh (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t _animator = 0x290; // Animator (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t _lodGroup = 0x298; // LODGroup (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t _currentGesture = 0x2A0; // RuntimeAnimatorController (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t holdTypeLock = 0x2A8; // float (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t hasHeldEntity = 0x2AC; // bool (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t wasMountedRightAim = 0x2AD; // bool (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t cachedMask = 0x2B0; // int (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t cachedConstructionMask = 0x2B4; // int (0.4499999999999999)
		inline constexpr ::std::ptrdiff_t WorkshopHeldEntity = 0x2B8; // HeldEntity (0.3083333333333333)
		inline constexpr ::std::ptrdiff_t wasCrawling = 0x2C0; // bool (0.28333333333333327)
		inline constexpr ::std::ptrdiff_t mountedSpineLookWeight = 0x2C4; // float (0.2583333333333333)
		inline constexpr ::std::ptrdiff_t _e9e7d6d743f79e8c47f55d0e11f5f8983846eecc = 0x2C8; // float
		inline constexpr ::std::ptrdiff_t _6440e8f7ebe0779d59481e00eda4dcc7d604a1c4 = 0x2CC; // bool
		inline constexpr ::std::ptrdiff_t _0ff09d21572ff0e51a9a0f11bad00d1837d25b07 = 0x2D0; // Nullable<float>
		inline constexpr ::std::ptrdiff_t mountedAnimSpeed = 0x2D8; // List<BlendShapeController> (0.325)
		inline constexpr ::std::ptrdiff_t preserveBones = 0x2E0; // bool (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t blendShapeControllers = 0x2E1; // bool (0.4916666666666667)
		inline constexpr ::std::ptrdiff_t IsNpc = 0x2E2; // bool (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t timeSinceReactionStart = 0x2E4; // TimeSince (0.5750000000000001)
		inline constexpr ::std::ptrdiff_t timeSinceLeftFootTest = 0x2E8; // TimeSince (0.575)
		inline constexpr ::std::ptrdiff_t cachedLeftFootPos = 0x2EC; // Vector3 (0.6)
		inline constexpr ::std::ptrdiff_t cachedLeftFootNormal = 0x2F8; // Vector3 (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t timeSinceRightFootTest = 0x304; // TimeSince (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t cachedRightFootPos = 0x308; // Vector3 (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t cachedRightFootNormal = 0x314; // Vector3 (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t _smoothAimWeight = 0x320; // float (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t _smoothVelocity = 0x324; // float (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t _smoothlookAngle = 0x328; // Vector3 (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t allowMountedHeadLook = 0x334; // bool (0.7666666666666666)
		inline constexpr ::std::ptrdiff_t overrideLeftHandIkWeight = 0x338; // float (0.7083333333333334)
		inline constexpr ::std::ptrdiff_t overrideRightHandIkWeight = 0x33C; // float (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t smoothLookDir = 0x340; // Vector3 (0.5083333333333333)
		inline constexpr ::std::ptrdiff_t lastSafeLookDir = 0x34C; // Vector3 (0.48333333333333334)
		inline constexpr ::std::ptrdiff_t cinematicLookAt = 0x358; // Vector3 (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t lastCinematicLookAt = 0x364; // Vector3 (0.375)
		inline constexpr ::std::ptrdiff_t cinematicLookAtWeight = 0x370; // float (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t cinematicTargetWeight = 0x374; // float (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[] (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[] (0.3545454545454545)
		inline constexpr ::std::ptrdiff_t LegParts = 0x388; // List<SkinnedMeshRenderer> (0.2899999999999999)
		inline constexpr ::std::ptrdiff_t _f711174ee4cf84087b5e271bf5bc97f1627986f0 = 0x390; // List<WearableFadeToggle>
		inline constexpr ::std::ptrdiff_t _d2b2cb877b1a44b4215c5e2cd05b5e8ef61357d7 = 0x398; // Transform[]
		inline constexpr ::std::ptrdiff_t _7be6ddd069dd852c3f495beff594a292c3bb4c38 = 0x3A0; // float
		inline constexpr ::std::ptrdiff_t _a3c6417fdf037eced58e9f1c896dba7474f27313 = 0x3A4; // Nullable<bool>
		inline constexpr ::std::ptrdiff_t _dac38434da38ebc68bc698e36080561593e0a625 = 0x3A8; // float
	} // PlayerModel
	namespace ModelState {
		inline constexpr ::std::ptrdiff_t _disposed = 0x10; // float (0.48333333333333334)
		inline constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
		inline constexpr ::std::ptrdiff_t poseType = 0x20; // int (0.41428571428571426)
		inline constexpr ::std::ptrdiff_t poseType = 0x24; // int
		inline constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3 (0.31428571428571433)
		inline constexpr ::std::ptrdiff_t ladderType = 0x34; // int (0.4142857142857143)
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x38; // Vector3 (0.4571428571428572)
		inline constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
		inline constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
		inline constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
		inline constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
	} // ModelState
	namespace Item {
		inline constexpr ::std::ptrdiff_t UID = 0x10; // ItemId
		inline constexpr ::std::ptrdiff_t itemid = 0x18; // int
		inline constexpr ::std::ptrdiff_t slot = 0x1C; // int
		inline constexpr ::std::ptrdiff_t amount = 0x20; // int
		inline constexpr ::std::ptrdiff_t flags = 0x24; // int
		inline constexpr ::std::ptrdiff_t _condition = 0x28; // float (0.049999999999999996)
		inline constexpr ::std::ptrdiff_t fuel = 0x2C; // float (0.325)
		inline constexpr ::std::ptrdiff_t isServer = 0x30; // NetworkableId (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t instanceData = 0x38; // Item.InstanceData (0.2916666666666667)
		inline constexpr ::std::ptrdiff_t skin = 0x40; // NetworkableId (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t name = 0x48; // Item.ConditionData (0.24166666666666667)
		inline constexpr ::std::ptrdiff_t heldEntity = 0x50; // string (0.09999999999999999)
		inline constexpr ::std::ptrdiff_t text = 0x58; // string (0.21666666666666667)
		inline constexpr ::std::ptrdiff_t ammoCount = 0x60; // ulong (0.3)
		inline constexpr ::std::ptrdiff_t cookTimeLeft = 0x68; // float (0.3)
		inline constexpr ::std::ptrdiff_t progressBar = 0x70; // string (0.36666666666666664)
		inline constexpr ::std::ptrdiff_t flags = 0x78; // int (0.4125)
		inline constexpr ::std::ptrdiff_t contents = 0x80; // ItemContainer (0.32857142857142857)
		inline constexpr ::std::ptrdiff_t worldEnt = 0x88; // bool (0.21666666666666667)
	} // Item
	namespace ItemDefinition {
		inline constexpr ::std::ptrdiff_t maxDraggable = 0x20; // int (0.6666666666666666)
		inline constexpr ::std::ptrdiff_t shortname = 0x28; // string (0.5142857142857142)
		inline constexpr ::std::ptrdiff_t displayDescription = 0x30; // Translate.Phrase (0.575)
		inline constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
		inline constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite (0.45999999999999996)
		inline constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory (0.4454545454545454)
		inline constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel (0.4333333333333333)
		inline constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
		inline constexpr ::std::ptrdiff_t itemType = 0x54; // %d2f53bbf30540d591c2d217147c7418cfc738ca2.ContentsType (0.45833333333333326)
		inline constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType (0.45833333333333326)
		inline constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot (0.45833333333333326)
		inline constexpr ::std::ptrdiff_t stackable = 0x60; // int (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t volume = 0x64; // int (0.45833333333333326)
		inline constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance (0.625)
		inline constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity (0.48333333333333334)
		inline constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition (0.575)
		inline constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition (0.7416666666666666)
		inline constexpr ::std::ptrdiff_t hidden = 0xB0; // bool (0.7166666666666667)
		inline constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem (0.6)
		inline constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem (0.6)
		inline constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3 (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour (0.6333333333333333)
		inline constexpr ::std::ptrdiff_t itemMods = 0x108; // ItemMod[] (0.6333333333333333)
		inline constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag (0.575)
		inline constexpr ::std::ptrdiff_t _skins2 = 0x120; // IPlayerItemDefinition[] (0.575)
		inline constexpr ::std::ptrdiff_t panel = 0x128; // GameObject (0.49166666666666664)
		inline constexpr ::std::ptrdiff_t ItemModWearable = 0x130; // ItemModWearable (0.40833333333333327)
		inline constexpr ::std::ptrdiff_t ItemModBurnable = 0x138; // ItemModBurnable (0.3545454545454545)
		inline constexpr ::std::ptrdiff_t ItemModCookable = 0x140; // ItemModCookable (0.38999999999999996)
		inline constexpr ::std::ptrdiff_t isHoldable = 0x148; // bool (0.5111111111111111)
		inline constexpr ::std::ptrdiff_t isUsable = 0x149; // bool (0.575)
		inline constexpr ::std::ptrdiff_t CraftableWithSkin = 0x14A; // bool (0.6571428571428571)
		inline constexpr ::std::ptrdiff_t Children = 0x150; // ItemDefinition[] (0.6499999999999999)
	} // ItemDefinition
	namespace DroppedItem {
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_Open = 0x290; // %85780758c8d4d2918511283d6f6204cc96c14526 (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x308; // string (0.4571428571428572)
		inline constexpr ::std::ptrdiff_t maxItemCount = 0x310; // int (0.6124999999999999)
		inline constexpr ::std::ptrdiff_t playerSteamID = 0x318; // ulong (0.6124999999999999)
		inline constexpr ::std::ptrdiff_t _playerName = 0x320; // string (0.525)
		inline constexpr ::std::ptrdiff_t onlyOwnerLoot = 0x328; // bool (0.6125)
		inline constexpr ::std::ptrdiff_t onlyOwnerLoot = 0x329; // bool
		inline constexpr ::std::ptrdiff_t openSound = 0x330; // SoundDefinition (0.5999999999999999)
		inline constexpr ::std::ptrdiff_t closeSound = 0x338; // SoundDefinition (0.5333333333333333)
	} // DroppedItem
	namespace WorldItem {
		inline constexpr ::std::ptrdiff_t allowPickup = 0x188; // bool
		inline constexpr ::std::ptrdiff_t item = 0x190; // %033c0143fa8e095703c6e344a2a85833e3628b3e (0.3)
	} // WorldItem
	namespace Model {
		inline constexpr ::std::ptrdiff_t boneNames = 0x20; // SphereCollider (0.8333333333333334)
		inline constexpr ::std::ptrdiff_t eyeBone = 0x28; // Transform (0.7142857142857143)
		inline constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
		inline constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
		inline constexpr ::std::ptrdiff_t animator = 0x40; // Animator (0.63)
		inline constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton (0.63)
		inline constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[] (0.73)
		inline constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
		inline constexpr ::std::ptrdiff_t boneDict = 0x60; // %d55d3c898db704adb56feae4e90f72d08d9ea282 (0.6625)
		inline constexpr ::std::ptrdiff_t skin = 0x68; // int (0.5714285714285714)
		inline constexpr ::std::ptrdiff_t _lodGroup = 0x70; // LODGroup (0.3833333333333333)
	} // Model
	namespace RecoilProperties {
		inline constexpr ::std::ptrdiff_t recoilPitchMin = 0x18; // float (0.3)
		inline constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
		inline constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
		inline constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float (0.37777777777777777)
		inline constexpr ::std::ptrdiff_t ADSScale = 0x28; // float (0.44000000000000006)
		inline constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
		inline constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
		inline constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t clampPitch = 0x38; // float (0.4166666666666666)
		inline constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve (0.3583333333333332)
		inline constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve (0.3583333333333332)
		inline constexpr ::std::ptrdiff_t useCurves = 0x50; // bool (0.4749999999999999)
		inline constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int (0.5333333333333333)
		inline constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float (0.5333333333333332)
		inline constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool (0.5916666666666666)
		inline constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float (0.5545454545454546)
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve (0.43999999999999995)
		inline constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve (0.4555555555555555)
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float (0.5625)
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float (0.5999999999999999)
		inline constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties (0.5333333333333333)
	} // RecoilProperties
	namespace BaseFishingRod {
		inline constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef (0.3833333333333333)
		inline constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float (0.4714285714285714)
		inline constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer (0.36249999999999993)
		inline constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform (0.35555555555555546)
		inline constexpr ::std::ptrdiff_t CurrentState = 0x238; // BaseFishingRod.CatchState (0.4499999999999999)
		inline constexpr ::std::ptrdiff_t currentFishState = 0x23C; // BaseFishingRod.FishState (0.49999999999999994)
		inline constexpr ::std::ptrdiff_t currentBobber = 0x240; // %815549d345a3e7fe543f9ec478d9901ad8e10820<FishingBobber> (0.5416666666666666)
		inline constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float (0.5166666666666666)
		inline constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float (0.575)
		inline constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float (0.5750000000000001)
		inline constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float (0.5750000000000001)
		inline constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition (0.5166666666666667)
		inline constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve (0.575)
		inline constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition (0.6333333333333333)
		inline constexpr ::std::ptrdiff_t lineRendererPositionsArray = 0x290; // Vector3[] (0.775)
		inline constexpr ::std::ptrdiff_t lineRendererResultArray = 0x298; // Vector3[] (0.7166666666666668)
		inline constexpr ::std::ptrdiff_t lineRendererSlack = 0x2A0; // float[] (0.7166666666666667)
		inline constexpr ::std::ptrdiff_t clientStrainAmountNormalised = 0x2A8; // float (0.6916666666666668)
		inline constexpr ::std::ptrdiff_t canCancel = 0x2AC; // TimeUntil (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t rodViewModel = 0x2B0; // FishingRodViewmodel (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t spawnedPreview = 0x2B8; // BobberPreview (0.5499999999999999)
		inline constexpr ::std::ptrdiff_t aimAnimationReady = 0x2C0; // bool (0.6636363636363636)
		inline constexpr ::std::ptrdiff_t onLineSound = 0x2C8; // Sound (0.6599999999999999)
		inline constexpr ::std::ptrdiff_t strainSound = 0x2D0; // Sound (0.7333333333333333)
		inline constexpr ::std::ptrdiff_t strainGainMod = 0x2D8; // SoundModulation.Modulator (0.9125)
		inline constexpr ::std::ptrdiff_t consumingBackMovement = 0x2E0; // TimeUntil (0.7571428571428571)
		inline constexpr ::std::ptrdiff_t reelInAnimTimer = 0x2E4; // TimeSince (0.7166666666666667)
	} // BaseFishingRod
	namespace FishingBobber {
		inline constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x290; // Transform (0.6499999999999999)
		inline constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody (0.5999999999999999)
		inline constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform (0.5624999999999999)
		inline constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform (0.611111111111111)
		inline constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B0; // float (0.6888888888888888)
		inline constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
		inline constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
		inline constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
		inline constexpr ::std::ptrdiff_t fishLerp = 0x2C0; // float (0.5999999999999999)
		inline constexpr ::std::ptrdiff_t lastPosition = 0x2C4; // Vector3 (0.4166666666666667)
	} // FishingBobber
	namespace OcclusionCulling {
		inline constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader (0.26666666666666666)
		inline constexpr ::std::ptrdiff_t camera = 0x28; // bool (0.18571428571428572)
		inline constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
		inline constexpr ::std::ptrdiff_t _85ed26a2f465403ae3f80a12362401b8f8feb857 = 0x30; // Camera
		inline constexpr ::std::ptrdiff_t staticSet = 0x58; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406 (0.36)
		inline constexpr ::std::ptrdiff_t dynamicSet = 0x60; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406 (0.41818181818181815)
		inline constexpr ::std::ptrdiff_t gridSet = 0x68; // OcclusionCulling.%78a4cce19de7b3324617a06b3d699f7d99553406 (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t frustumPlanes = 0x38; // Vector4[] (0.4666666666666666)
		inline constexpr ::std::ptrdiff_t frustumPropNames = 0x40; // string[] (0.525)
		inline constexpr ::std::ptrdiff_t matrixToFloatTemp = 0x48; // float[] (0.5833333333333334)
		inline constexpr ::std::ptrdiff_t fallbackMat = 0x50; // Material (0.5)
		inline constexpr ::std::ptrdiff_t depthCopyMat = 0x58; // Material (0.525)
		inline constexpr ::std::ptrdiff_t viewMatrix = 0x60; // Matrix4x4 (0.6083333333333333)
		inline constexpr ::std::ptrdiff_t projMatrix = 0xA0; // Matrix4x4 (0.6333333333333333)
		inline constexpr ::std::ptrdiff_t viewProjMatrix = 0xE0; // Matrix4x4 (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t prevViewProjMatrix = 0x120; // Matrix4x4 (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t invViewProjMatrix = 0x160; // Matrix4x4 (0.6833333333333332)
		inline constexpr ::std::ptrdiff_t useNativePath = 0x1A0; // bool (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t instance = 0x70; // OcclusionCulling (0.6)
		inline constexpr ::std::ptrdiff_t Passthrough = 0x78; // bool (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t _enabled = 0x88; // bool (0.6583333333333333)
		inline constexpr ::std::ptrdiff_t _safeMode = 0x89; // bool (0.6)
		inline constexpr ::std::ptrdiff_t _debugShow = 0x8C; // OcclusionCulling.DebugFilter (0.5666666666666665)
		inline constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings (0.5083333333333333)
		inline constexpr ::std::ptrdiff_t debugMipMat = 0x1B0; // Material (0.48333333333333334)
		inline constexpr ::std::ptrdiff_t downscaleMat = 0x1B8; // Material (0.4833333333333332)
		inline constexpr ::std::ptrdiff_t blitCopyMat = 0x1C0; // Material (0.4583333333333333)
		inline constexpr ::std::ptrdiff_t hiZLevelCount = 0x1C8; // int (0.5363636363636363)
		inline constexpr ::std::ptrdiff_t hiZWidth = 0x1CC; // int (0.5599999999999999)
		inline constexpr ::std::ptrdiff_t hiZHeight = 0x1D0; // int (0.6222222222222222)
		inline constexpr ::std::ptrdiff_t depthTexture = 0x1D8; // RenderTexture (0.6124999999999999)
		inline constexpr ::std::ptrdiff_t hiZTexture = 0x1E0; // RenderTexture (0.557142857142857)
		inline constexpr ::std::ptrdiff_t hiZLevels = 0x1E8; // RenderTexture[] (0.65)
	} // OcclusionCulling
	namespace OcclusionCulling_DebugSettings {
		inline constexpr ::std::ptrdiff_t showMipChain = 0x10; // bool (0.3)
		inline constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
		inline constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
		inline constexpr ::std::ptrdiff_t showMain = 0x13; // bool (0.34444444444444444)
		inline constexpr ::std::ptrdiff_t showMainLod = 0x14; // int (0.34444444444444444)
		inline constexpr ::std::ptrdiff_t showStats = 0x18; // bool (0.34444444444444444)
		inline constexpr ::std::ptrdiff_t showStats = 0x19; // bool
		inline constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool (0.35)
		inline constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask (0.39999999999999997)
		inline constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask (0.25)
	} // OcclusionCulling_DebugSettings
}